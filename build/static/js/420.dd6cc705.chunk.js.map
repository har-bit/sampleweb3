{"version":3,"file":"static/js/420.dd6cc705.chunk.js","mappings":"2OAKA,MAAMA,E,MAAMC,GAAAA,UAAmB,gBAC/BD,EAAIE,SAASC,EAAAA,OAAOC,MAYpB,IAAIC,EAAS,gBACTC,EAAY,GAehB,IAAIC,EAAwB,KAC5B,MAAMC,EAA2B,GAC3BC,EAAyB,GAoBxB,SAASC,EAAUC,GACxBN,EAASM,CACX,CAYO,SAASC,EAAYC,GAC1Bb,EAAIE,SAASW,EACf,CAEAC,eAAeC,EAAcC,EAAaC,GACxC,IAAIC,EAAmB,KACvB,IACEA,EAAO,IAAIC,IAAIH,EACjB,CAAE,MAAOI,GAAQ,CACjB,GAAIb,GAAUW,IAASV,EAAea,SAASH,EAAKI,SAAWb,EAAaY,SAASH,EAAKK,WAAY,CACpG,MAAMC,EAAcjB,EAAOkB,iBAAiB,CAC1CC,KAAMV,IAEFW,EAAOH,EAAYI,WAAW,CAClCC,GAAI,SAGAC,QAAiBC,MAAMf,EAAKC,GAKlC,OAJAU,EAAKK,SAELR,EAAYQ,SAELF,CACT,CAEA,OAAOC,MAAMf,EAAKC,EACpB,CACA,SAASgB,IACP,MAAMC,EAAkC,CAAC,EAGzC,OAFI7B,IAAQ6B,EA7EmB,aA6EU7B,GACrCC,IAAW4B,EA7EqB,gBA6Ea5B,GAC1C4B,CACT,CAEA,SAASC,EAAiBL,GACxB9B,EAAIoC,KAAM,aAAYN,EAASO,UAAUP,EAASQ,cAClDtC,EAAIoC,KAAM,QAAON,EAASd,MAC5B,C,MAgBauB,EAAMzB,eAAUE,GAA+E,IAAlEwB,EAAqBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACjE,MAAMG,EAAiB,CACrBC,KAAM,OACNX,QAAS,CAAC,IAHoFO,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,GAKlFK,YAChBF,EAAeV,SAAOa,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQH,EAAeV,SAAYD,MAE3D,MAAMe,EAAUC,IAAML,EAAgBJ,EAAU,CAAEU,OAAQ,QACpDpB,QAAiBf,EAAcC,EAAKgC,GAC1C,GAAIlB,EAASqB,GAAI,CACf,MAAMC,EAAsBtB,EAASI,QAAQK,IAAI,gBACjD,OAAI,OAAAa,QAAA,IAAAA,GAAAA,EAAqB/B,SAAS,oBACzBS,EAASuB,OAEXvB,EAASwB,MAClB,CAEA,MADAnB,EAAiBL,GACXA,CACR,EAEayB,EAAO,SAAIvC,GAAgG,IAAnFwC,EAAUf,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAGD,EAAqBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAGgB,EAA4BhB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAChH,MAAMG,EAAiB,CACrBC,KAAM,OACNX,QAAS,CACP,eAAgB,oCAGhBuB,EAAcX,YAChBF,EAAeV,SAAOa,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQH,EAAeV,SAAYD,MAE3D,MAAMe,EAAUC,IAAML,EAAgBJ,EAAU,CAAEU,OAAQ,SAe1D,OAXIO,EAAcC,kBAIhBV,EAAQW,KAAOH,EAEyB,oCAApCR,EAAQd,QAAQ,wBAA8Dc,EAAQd,QAAQ,iBAElGc,EAAQW,KAAOC,KAAKC,UAAUL,GArDJM,EAAIC,EAAYC,KAC5C,MAAMC,EAAU,IAAIC,SAAW,CAACC,EAAUC,KACxC,MAAMC,EAAKC,YAAW,KACpBC,aAAaF,GACbD,EAAO,IAAII,MAAO,gBAAeT,OAAQ,GACxCA,EAAG,IAER,OAAOG,QAAQO,KAAQ,CAACT,EAASC,GAAS,EAiDnCH,CACJL,EAAcQ,SAAsB,IACrClD,EAAcC,EAAKgC,GAAS0B,MAAM5C,IAIhC,GAHI2B,EAAckB,kBA/DxB,SAA0B7C,GACxB9B,EAAIoC,KAAM,gCAA+BN,EAASI,QAAQK,IAAI,2BAChE,CA8DQoC,CAAiB7C,GAEfA,EAASqB,GAAI,CACf,MAAMC,EAAsBtB,EAASI,QAAQK,IAAI,gBACjD,OAAI,OAAAa,QAAA,IAAAA,GAAAA,EAAqB/B,SAAS,oBACzBS,EAASuB,OAEXvB,EAASwB,MAClB,CAEA,MADAnB,EAAiBL,GACXA,CAAQ,IAGpB,EAEa8C,EAAQ9D,eAAUE,GAAgG,IAAnFwC,EAAUf,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAGD,EAAqBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAGgB,EAA4BhB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACvH,MAAMG,EAAiB,CACrBC,KAAM,OACNX,QAAS,CACP,eAAgB,oCAMhBuB,EAAcX,YAChBF,EAAeV,SAAOa,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQH,EAAeV,SAAYD,MAE3D,MAAMe,EAAUC,IAAML,EAAgBJ,EAAU,CAAEU,OAAQ,UAGtDO,EAAcC,kBAIhBV,EAAQW,KAAOH,EAEyB,oCAApCR,EAAQd,QAAQ,wBAA8Dc,EAAQd,QAAQ,iBAElGc,EAAQW,KAAOC,KAAKC,UAAUL,GAEhC,MAAM1B,QAAiBf,EAAcC,EAAKgC,GAC1C,GAAIlB,EAASqB,GAAI,CACf,MAAMC,EAAsBtB,EAASI,QAAQK,IAAI,gBACjD,OAAI,OAAAa,QAAA,IAAAA,GAAAA,EAAqB/B,SAAS,oBACzBS,EAASuB,OAEXvB,EAASwB,MAClB,CAEA,MADAnB,EAAiBL,GACXA,CACR,EAEa+C,EAAM/D,eAAUE,GAAgG,IAAnFwC,EAAUf,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAGD,EAAqBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAGgB,EAA4BhB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACrH,MAAMG,EAAiB,CACrBC,KAAM,OACNX,QAAS,CACP,eAAgB,oCAMhBuB,EAAcX,YAChBF,EAAeV,SAAOa,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQH,EAAeV,SAAYD,MAE3D,MAAMe,EAAUC,IAAML,EAAgBJ,EAAU,CAAEU,OAAQ,QAGtDO,EAAcC,kBAIhBV,EAAQW,KAAOH,EAEyB,oCAApCR,EAAQd,QAAQ,wBAA8Dc,EAAQd,QAAQ,iBAElGc,EAAQW,KAAOC,KAAKC,UAAUL,GAEhC,MAAM1B,QAAiBf,EAAcC,EAAKgC,GAC1C,GAAIlB,EAASqB,GAAI,CACf,MAAMC,EAAsBtB,EAASI,QAAQK,IAAI,gBACjD,OAAI,OAAAa,QAAA,IAAAA,GAAAA,EAAqB/B,SAAS,oBACzBS,EAASuB,OAEXvB,EAASwB,MAClB,CAEA,MADAnB,EAAiBL,GACXA,CACR,C,gFCpPO,MAAegD,UAA6BC,EAAAA,GACjDjE,WAAWkE,GACJC,KAAKC,cAAaD,KAAKC,aAAcC,EAAAA,EAAAA,IAAeC,EAAAA,GAAiBC,OAAQ,GACpF,CAEAvE,yBACE,IAAKmE,KAAKK,UAAYL,KAAK5C,SAAWkD,EAAAA,GAAeC,UAAW,MAAMC,EAAAA,GAAiBC,oBAEvF,MAAM,eAAEC,EAAc,QAAEC,GAAYX,KAAKC,YAEnCW,QAAiBZ,KAAKK,SAASQ,QAAyB,CAC5D5C,OAAQ,gBAEV,GAAI2C,GAAYA,EAASnD,OAAS,EAAG,CACnC,MAAMqD,GAAgBC,EAAAA,EAAAA,IAAcH,EAAS,GAAcZ,KAAKvD,MAChE,GAAIqE,EAAe,CAEjB,KADkBE,EAAAA,EAAAA,IAAsBF,GAEtC,MAAO,CAAEG,QAASH,EAEtB,CAEA,MAAMI,EAAU,CACdC,OAAQC,OAAOC,SAAShF,OACxBiF,IAAKF,OAAOC,SAASE,KACrBC,QAASZ,EAAS,GAClBD,QAASc,SAASd,EAAS,IAC3Be,QAAS,IACTC,MAAOC,KAAKC,SAASC,SAAS,IAAIC,MAAM,GACxCC,UAAU,IAAIC,MAAOC,eAGjBC,QAAkBC,EAAAA,EAAAA,IAAclB,EAASR,GACzC2B,GAAiB,IAAIC,aAAcC,OAAOJ,GAC1CK,QAAsBxC,KAAKK,SAASQ,QAA8D,CACtG5C,OAAQ,cACRwE,OAAQ,CACNC,QAASL,EACTM,QAAS,UAGP1B,QAAgB2B,EAAAA,EAAAA,IACpBlC,EACAmC,IAAAA,OAAYL,GACZL,EACAnC,KAAKvD,KACLuD,KAAK8C,YACL9C,KAAK+C,SACL/C,KAAKgD,iBAGP,OADAC,EAAAA,EAAAA,IAAUrC,EAAS,GAAcZ,KAAKvD,KAAMwE,GACrC,CACLA,UAEJ,CACA,MAAMT,EAAAA,GAAiBC,kBAAkB,wDAC3C,CAEA5E,0BACEqH,MAAMC,iCACN,MAAMvC,QAAiBZ,KAAKK,SAASQ,QAAyB,CAC5D5C,OAAQ,gBAEN2C,GAAYA,EAASnD,OAAS,IAChC2F,EAAAA,EAAAA,IAAWxC,EAAS,GAAIZ,KAAKvD,KAEjC,CAEAZ,mBACEmE,KAAKqD,YAAa,EAClBrD,KAAKsD,KAAKC,EAAAA,GAAeC,aAC3B,E,wBC+BFC,EAAOC,QAlHP,SAAeC,GACb,GAAIA,EAASlG,QAAU,IAAO,MAAM,IAAImG,UAAU,qBAElD,IADA,IAAIC,EAAW,IAAIC,WAAW,KACrBC,EAAI,EAAGA,EAAIF,EAASpG,OAAQsG,IACnCF,EAASE,GAAK,IAEhB,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAASlG,OAAQuG,IAAK,CACxC,IAAIC,EAAIN,EAASO,OAAOF,GACpBG,EAAKF,EAAEG,WAAW,GACtB,GAAqB,MAAjBP,EAASM,GAAe,MAAM,IAAIP,UAAUK,EAAI,iBACpDJ,EAASM,GAAMH,CACjB,CACA,IAAIK,EAAOV,EAASlG,OAChB6G,EAASX,EAASO,OAAO,GACzBK,EAAS3C,KAAK7G,IAAIsJ,GAAQzC,KAAK7G,IAAI,KACnCyJ,EAAU5C,KAAK7G,IAAI,KAAO6G,KAAK7G,IAAIsJ,GA8CvC,SAASI,EAAcC,GACrB,GAAsB,kBAAXA,EAAuB,MAAM,IAAId,UAAU,mBACtD,GAAsB,IAAlBc,EAAOjH,OAAgB,OAAO,IAAIqG,WAKtC,IAJA,IAAIa,EAAM,EAENC,EAAS,EACTnH,EAAS,EACNiH,EAAOC,KAASL,GACrBM,IACAD,IAMF,IAHA,IAAIE,GAAUH,EAAOjH,OAASkH,GAAOJ,EAAU,IAAO,EAClDO,EAAO,IAAIhB,WAAWe,GAEnBH,EAAOC,IAAM,CAElB,IAAII,EAAQlB,EAASa,EAAON,WAAWO,IAEvC,GAAc,MAAVI,EAAiB,OAErB,IADA,IAAIf,EAAI,EACCgB,EAAMH,EAAO,GAAc,IAAVE,GAAef,EAAIvG,KAAqB,IAATuH,EAAaA,IAAOhB,IAC3Ee,GAAUV,EAAOS,EAAKE,KAAU,EAChCF,EAAKE,GAAQD,EAAQ,MAAS,EAC9BA,EAASA,EAAQ,MAAS,EAE5B,GAAc,IAAVA,EAAe,MAAM,IAAIxF,MAAM,kBACnC9B,EAASuG,EACTW,GACF,CAGA,IADA,IAAIM,EAAMJ,EAAOpH,EACVwH,IAAQJ,GAAsB,IAAdC,EAAKG,IAC1BA,IAIF,IAFA,IAAIC,EAAM,IAAIpB,WAAWc,GAAUC,EAAOI,IACtClB,EAAIa,EACDK,IAAQJ,GACbK,EAAInB,KAAOe,EAAKG,KAElB,OAAOC,CACT,CAMA,MAAO,CACL3C,OA7FF,SAAiBmC,GAOf,GANIA,aAAkBZ,aACXqB,YAAYC,OAAOV,GAC5BA,EAAS,IAAIZ,WAAWY,EAAOW,OAAQX,EAAOY,WAAYZ,EAAOa,YACxDC,MAAMC,QAAQf,KACvBA,EAASZ,WAAW4B,KAAKhB,OAErBA,aAAkBZ,YAAe,MAAM,IAAIF,UAAU,uBAC3D,GAAsB,IAAlBc,EAAOjH,OAAgB,MAAO,GAMlC,IAJA,IAAImH,EAAS,EACTnH,EAAS,EACTkI,EAAS,EACTC,EAAOlB,EAAOjH,OACXkI,IAAWC,GAA2B,IAAnBlB,EAAOiB,IAC/BA,IACAf,IAMF,IAHA,IAAIC,GAASe,EAAOD,GAAUnB,EAAU,IAAO,EAC3CqB,EAAM,IAAI/B,WAAWe,GAElBc,IAAWC,GAAM,CAItB,IAHA,IAAIb,EAAQL,EAAOiB,GAEf3B,EAAI,EACC8B,EAAMjB,EAAO,GAAc,IAAVE,GAAef,EAAIvG,KAAqB,IAATqI,EAAaA,IAAO9B,IAC3Ee,GAAU,IAAMc,EAAIC,KAAU,EAC9BD,EAAIC,GAAQf,EAAQV,IAAU,EAC9BU,EAASA,EAAQV,IAAU,EAE7B,GAAc,IAAVU,EAAe,MAAM,IAAIxF,MAAM,kBACnC9B,EAASuG,EACT2B,GACF,CAGA,IADA,IAAII,EAAMlB,EAAOpH,EACVsI,IAAQlB,GAAqB,IAAbgB,EAAIE,IACzBA,IAIF,IADA,IAAIC,EAAM1B,EAAO2B,OAAOrB,GACjBmB,EAAMlB,IAAQkB,EAAOC,GAAOrC,EAASO,OAAO2B,EAAIE,IACvD,OAAOC,CACT,EAkDEvB,aAAcA,EACdyB,OARF,SAAiBC,GACf,IAAId,EAASZ,EAAa0B,GAC1B,GAAId,EAAU,OAAOA,EACrB,MAAM,IAAI9F,MAAM,WAAa8E,EAAO,aACtC,EAMF,C,iBCvHA,MAAM+B,EAAQC,EAAQ,MAGtB5C,EAAOC,QAAU0C,EAFA,6D,iOCCjB,SAASE,IAET,CAEA,MACMC,EAAM,MAGG,MAAMC,UAA8BC,EAAAA,OAkBjDC,YAAWC,GAUR,IAVS,KACVlK,EAAI,OACJmK,EAAM,aACNC,EAAezF,OAAM,aACrB0F,EAAe,KAMhBH,EAIC,GAHAzD,MAAM,CACJ6D,YAAY,KACXC,EAAAA,EAAAA,GAAA,sBAAAA,EAAAA,EAAAA,GAAA,yBAAAA,EAAAA,EAAAA,GAAA,sBAAAA,EAAAA,EAAAA,GAAA,wBAAAA,EAAAA,EAAAA,GAAA,8BAAAA,EAAAA,EAAAA,GAAA,8BAlBLA,EAAAA,EAAAA,GAAA,2BAAAA,EAAAA,EAAAA,GAAA,+BAmBOvK,IAASmK,EACZ,MAAM,IAAIrH,MAAM,kBAElBS,KAAKiH,OAAQ,EACbjH,KAAKkH,UAAW,EAChBlH,KAAKmH,MAAQ1K,EACbuD,KAAKoH,QAAUR,EACf5G,KAAKqH,cAAgBR,EACrB7G,KAAKsH,cAAgBR,EACrB9G,KAAKuH,WAAavH,KAAKwH,UAAUC,KAAKzH,MACtCA,KAAK0H,eAAiB,KAEtBtG,OAAOuG,iBAAiB,UAAW3H,KAAKuH,YAAY,GACpDvH,KAAK4H,YACP,CAEAC,SACE7H,KAAK8H,OACL9H,KAAK+H,OApDG,MAoDS,KAAMzB,GACvBtG,KAAKkH,UAAW,EAChBlH,KAAKiH,OAAQ,CACf,CAEAW,aACE5H,KAAK+H,OA5DG,MA4DS,KAAMzB,GACvBtG,KAAK8H,MACP,CAEAE,QAAQzJ,GACN,GAAKyB,KAAKiH,MAYH,GA3EC,QA2EG1I,EACTyB,KAAK6H,cAGL,IACE7H,KAAKiI,KAAK1J,E,CACV,MAAO2J,GACPlI,KAAKsD,KAAK,QAAS4E,EACrB,KArFM,QAmEF3J,GACFyB,KAAKkH,UAAW,EAChBlH,KAAK+H,OAAOxB,EAAK,KAAMD,IACd/H,IAASgI,IAClBvG,KAAKiH,OAAQ,EACRjH,KAAKkH,UACRlH,KAAK+H,OAAOxB,EAAK,KAAMD,GAEzBtG,KAAKmI,SAYX,CAEAC,aAAa7J,GACX,MAAM8J,EAAmBrI,KAAKsH,cAC9BtH,KAAKqH,cAAciB,YACjB,CACE1B,OAAQ5G,KAAKoH,QACb7I,QAEF8J,EAEJ,CAEAb,UAAUe,GACR,MAAM7F,EAAU6F,EAAMhK,KAII,MAAvByB,KAAKsH,eAAyBiB,EAAMlM,SAAW2D,KAAKsH,eACrDiB,EAAM7D,SAAW1E,KAAKqH,eACH,kBAAZ3E,GACPA,EAAQkE,SAAW5G,KAAKmH,QACvBzE,EAAQnE,MAKXyB,KAAKgI,QAAQtF,EAAQnE,KACvB,CAEAiK,QAEA,CAGAT,OAAOxJ,EAAewB,EAAQ0I,GAC5BzI,KAAKoI,aAAa7J,GAClBkK,GACF,CAEAC,WACEtH,OAAOuH,oBAAoB,UAAW3I,KAAKuH,YAAY,EACzD,EC/HF,SAASqB,EAA8BC,EAA+CC,EAAYC,GAChG,IACEC,QAAQC,MAAMJ,EAASC,EAASC,E,CAChC,MAAOb,GAEP7I,YAAW,KACT,MAAM6I,CAAG,GAEb,CACF,CAWe,MAAMgB,UAAyBC,EAAAA,aAC5C7F,KAAK8F,GACH,IAAIC,EAAmB,UAATD,EAEd,MAAME,EAAoBtJ,KAAauJ,QACvC,QAAe7L,IAAX4L,EACFD,EAAUA,QAA4B3L,IAAjB4L,EAAOnN,WACvB,IAAKkN,EACV,OAAO,EAGT,QAAAG,EAAAhM,UAAAC,OAVoBsL,EAAI,IAAAvD,MAAAgE,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAJV,EAAIU,EAAA,GAAAjM,UAAAiM,GAWxB,GAAIJ,EAAS,CACX,IAAIK,EAIJ,GAHIX,EAAKtL,OAAS,KACfiM,GAAMX,GAELW,aAAcnK,MAGhB,MAAMmK,EAGR,MAAMxB,EAAM,IAAI3I,MAAO,oBAAkBmK,EAAU,KAAAA,EAAGhH,WAAa,KAEnE,MADCwF,EAAYY,QAAUY,EACjBxB,CACR,CAEA,MAAMW,EAAUS,EAAOF,GAEvB,QAAgB1L,IAAZmL,EACF,OAAO,EAGT,GAAuB,oBAAZA,EACTD,EAAUC,EAAS7I,KAAM+I,OACpB,CACL,MAAMY,EAAMd,EAAQpL,OACdmM,EA/CZ,SAAuBC,GACrB,MAAMC,EAAID,EAAIpM,OACRsM,EAAO,IAAIvE,MAAMsE,GACvB,IAAK,IAAI9F,EAAI,EAAGA,EAAI8F,EAAG9F,GAAK,EAC1B+F,EAAK/F,GAAK6F,EAAI7F,GAEhB,OAAO+F,CACT,CAwCwBC,CAAWnB,GAC7B,IAAK,IAAI7E,EAAI,EAAGA,EAAI2F,EAAK3F,GAAK,EAC5B4E,EAAUgB,EAAU5F,GAAIhE,KAAM+I,EAElC,CAEA,OAAO,CACT,ECvEa,MAAMkB,UAA6B1K,MAKhDmH,YAAWC,GAAuE,IAAtE,KAAEuD,EAAI,QAAExH,EAAO,KAAEnE,GAAmDoI,EAC9E,IAAKwD,OAAOC,UAAUF,GACpB,MAAM,IAAI3K,MAAM,2BAElB,IAAKmD,GAA8B,kBAAZA,EACrB,MAAM,IAAInD,MAAM,0BAGlB2D,MAAMR,IAASsE,EAAAA,EAAAA,GAAA,qBAAAA,EAAAA,EAAAA,GAAA,oBACfhH,KAAKkK,KAAOA,OACCxM,IAATa,IACFyB,KAAKzB,KAAOA,EAEhB,CAEAuD,WACE,OAAOlD,IAAU,CACfsL,KAAMlK,KAAKkK,KACXxH,QAAS1C,KAAK0C,QACdnE,KAAMyB,KAAKzB,KACX8L,MAAOrK,KAAKqK,OAEhB,E,MCvBWC,EACX,SAACC,EAAoCpL,GAA+B,IAAEqL,IAAYhN,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAAO,MACzF,CAACrB,EAAcU,KACTV,GAASU,EAASV,MACpBgD,EAAOhD,GAASU,EAASV,QACfqO,GAAgBhF,MAAMC,QAAQ5I,GACxC0N,EAAQ1N,GAER0N,EAAQ1N,EAAS4N,OACnB,CACD,EA2BI,SAASC,IACd,MAAMC,EAAe,CAAC,EAMtB,MAAMrB,EAAS,IAAIJ,EAoCnB,MAAM0B,EAAS,IAAInE,EAAAA,OAAO,CACxBM,YAAY,EACZ8D,KA1CF,WACE,OAAO,CACT,EAyCEC,MAnBF,SAAwBC,EAA4BC,EAAoBvC,GACtE,IAAIP,EACJ,KAC0B6C,EAAI3L,GAPhC,SAA6B2L,GAC3BzB,EAAOhG,KAAK,eAAgByH,EAC9B,CAOME,CAAoBF,GAvB1B,SAAyBA,GACvB,MAAMjC,EAAU6B,EAAMI,EAAI3L,IAC1B,IAAK0J,EACH,MAAM,IAAIvJ,MAAO,2CAA0CwL,EAAI3L,cAG1DuL,EAAMI,EAAI3L,IAEjB8L,OAAOC,OAAOrC,EAAQiC,IAAKA,GAG3B1L,WAAWyJ,EAAQsC,IACrB,CAaMC,CAAgBN,E,CAElB,MAAOO,GACPpD,EAAMoD,CACR,CAEA7C,EAAGP,EACL,IAeA,MAAO,CAAEoB,SAAQiC,WAPoCA,CAACC,EAAKT,EAAKU,EAAML,KAEpER,EAAO3C,KAAKuD,GAEZb,EAAMa,EAAIpM,IAA2B,CAAEoM,MAAKT,MAAKU,OAAML,MAAK,EAGjCR,SAC/B,CC/EO,MAAMc,UAAmBxC,EAG9BxC,cACExD,SAAQ8D,EAAAA,EAAAA,GAAA,2BACRhH,KAAK2L,YAAc,EACrB,CASA,+BACEH,EACAT,EACAa,GAQA,MAAMC,EAA4C,GAClD,IAAI1P,EAAQ,KACR2P,GAAa,EAGjB,IAAK,MAAMP,KAAcK,EAEvB,IADCzP,EAAO2P,SAAoBJ,EAAWK,eAAeP,EAAKT,EAAKQ,EAAYM,GACxEC,EACF,MAGJ,MAAO,CAAC3P,EAAO2P,EAAYD,EAAeG,UAC5C,CAQA,sBACER,EACAT,EACAQ,EACAM,GAEA,OAAO,IAAI5M,SAASsL,IAClB,MAAMa,EAA8BlD,IAClC,MAAM/L,EAAQ+L,GAAO6C,EAAI5O,MACrBA,IACF4O,EAAI5O,OAAQ8P,EAAAA,EAAAA,IAAe9P,IAG7BoO,EAAQ,CAACpO,GAAO,GAAM,EAGlBsP,EAAgCS,IAChCnB,EAAI5O,MACNiP,EAAIL,EAAI5O,QAEJ+P,IAC2B,oBAAlBA,GACTd,EAAI,IAAInB,EAAkB,CAAEC,MAAO,MAAOxH,QAAS,0DAErDmJ,EAAe5D,KAAKiE,IAItB3B,EAAQ,CAAC,MAAM,IACjB,EAGF,IACEgB,EAAWC,EAAKT,EAAKU,EAAML,E,CAC3B,MAAOjP,GACPiP,EAAIjP,EACN,IAEJ,CAMA,gCAAwCgQ,GACtC,IAAK,MAAMtD,KAAWsD,QACd,IAAIlN,SAAc,CAACsL,EAASpL,KAChC0J,GAASX,GAASA,EAAM/I,EAAO+I,GAAOqC,KAAW,GAGvD,CAMA,2BAAmC6B,EAA4BrB,EAA4Be,GACzF,KAAM,WAAYf,MAAU,UAAWA,GACrC,MAAM,IAAId,EAAkB,CAAEC,MAAO,MAAOxH,QAAS,gDAEvD,IAAKoJ,EACH,MAAM,IAAI7B,EAAkB,CAAEC,MAAO,MAAOxH,QAAS,yBAEzD,CAOAuF,KAAWsD,GACTvL,KAAK2L,YAAY1D,KAAKsD,EACxB,CAsCAc,OAAOb,EAAc/C,GACnB,GAAIA,GAAoB,oBAAPA,EACf,MAAM,IAAIlJ,MAAM,8CAGlB,OAAIiG,MAAMC,QAAQ+F,GACZ/C,EACKzI,KAAKsM,aAAad,EAAK/C,GAEzBzI,KAAKsM,aAAad,GAGvB/C,EACKzI,KAAKuM,QAAQf,EAA6B/C,GAE5CzI,KAAKwM,eAAehB,EAC7B,CAQAiB,eACE,OAAO5Q,MAAO2P,EAAKT,EAAKU,EAAML,KAC5B,IACE,MAAOsB,EAAiBZ,EAAYD,SAAwBH,EAAWiB,kBAAkBnB,EAAKT,EAAK/K,KAAK2L,aAExG,OAAIG,SACIJ,EAAWkB,mBAAmBf,GAC7BT,EAAIsB,IAGNjB,GAAK5P,UACV,UACQ6P,EAAWkB,mBAAmBf,E,CACpC,MAAO1P,GACP,OAAO0Q,EAAgB1Q,EACzB,CACA,OAAO0Q,GAAiB,G,CAE1B,MAAO1Q,GACP,OAAOiP,EAAIjP,EACb,EAEJ,CAYA,mBACE2Q,EACArE,GAGA,IAGE,MAAMsE,QAAkB9N,QAAQ+N,IAE9BF,EAAKG,IAAIjN,KAAKwM,eAAe/E,KAAKzH,QAIpC,OAAIyI,EACKA,EAAG,KAAMsE,GAEXA,C,CACP,MAAO5Q,GACP,GAAIsM,EACF,OAAOA,EAAGtM,GAGZ,MAAMA,CACR,CACF,CAKQqQ,eAAehB,GACrB,OAAO,IAAIvM,SAASsL,IAClBvK,KAAKuM,QAAQf,GAAK,CAACF,EAAMP,KAGvBR,EAAQQ,EAAI,GACZ,GAEN,CAQA,cAAsBmC,EAAiCzE,GACrD,IAAKyE,GAAa1H,MAAMC,QAAQyH,IAAmC,kBAAdA,EAAwB,CAC3E,MAAM/Q,EAAQ,IAAI8N,EAAkB,CAAEC,MAAO,MAAOxH,QAAS,iCAC7D,OAAO+F,EAAGtM,EAAO,CAAEiD,QAAI1B,EAAWyP,QAAS,MAAOhR,SACpD,CAEA,GAAgC,kBAArB+Q,EAAUjP,OAAqB,CACxC,MAAM9B,EAAQ,IAAI8N,EAAkB,CAAEC,MAAO,MAAOxH,QAAS,0BAC7D,OAAO+F,EAAGtM,EAAO,CAAEiD,GAAI8N,EAAU9N,GAAI+N,QAAS,MAAOhR,SACvD,CAEA,MAAMqP,GAAyB1N,EAAAA,EAAAA,GAAA,GAAQoP,GACjCnC,EAA6B,CACjC3L,GAAIoM,EAAIpM,GACR+N,QAAS3B,EAAI2B,SAEf,IAAIhR,EAAe,KAEnB,UACQ6D,KAAKoN,gBAAgB5B,EAAKT,E,CAChC,MAAOsC,GAGPlR,EAAQkR,CACV,CAUA,OARIlR,WAEK4O,EAAIN,OACNM,EAAI5O,QACP4O,EAAI5O,OAAQ8P,EAAAA,EAAAA,IAAe9P,KAIxBsM,EAAGtM,EAAO4O,EACnB,CAOA,sBAA8BS,EAA2BT,GACvD,MAAO5O,EAAO2P,EAAYD,SAAwBH,EAAWiB,kBAAkBnB,EAAKT,EAAK/K,KAAK2L,aAY9F,GARAD,EAAW4B,oBAAoB9B,EAAKT,EAAKe,SAInCJ,EAAWkB,mBAAmBf,GAIhC1P,EACF,MAAMA,CAEV,EC9Ua,MAAMoR,UAAkB9G,EAAAA,OAKrCC,YAAWC,GAAkD,IAAjD,OAAE6G,EAAM,KAAE/Q,GAAqCkK,EACzDzD,MAAM,CAAE6D,YAAY,KAAQC,EAAAA,EAAAA,GAAA,wBAAAA,EAAAA,EAAAA,GAAA,qBAC5BhH,KAAKyN,QAAUD,EACfxN,KAAKmH,MAAQ1K,CACf,CAKA+L,QAEA,CASAT,OAAO2F,EAAgB1C,EAA2B2C,GAChD3N,KAAKyN,QAAQxF,KAAK,CAChBxL,KAAMuD,KAAKmH,MACX5I,KAAMmP,IAERC,GACF,E,MC3BWC,EAAmBC,OAAO,oBAShC,MAAMC,UAAwBrH,EAAAA,OAKnCC,cAAgD,IAApCqH,EAA6BvQ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC3C0F,OAAKpF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACFiQ,GAAI,IACPhH,YAAY,MACXC,EAAAA,EAAAA,GAAA,4BAAAA,EAAAA,EAAAA,GAAA,yBACHhH,KAAKgO,YAAc,CAAC,CACtB,CAEAC,aAAaxR,GAEX,IAAKA,EACH,MAAM,IAAI8C,MAAM,4CAGlB,GAAIS,KAAKgO,YAAYvR,GACnB,MAAM,IAAI8C,MAA+C,yCAAA9C,qBAI3D,MAAMyR,EAAY,IAAIX,EAAU,CAAEC,OAAQxN,KAAMvD,SAOhD,OANAuD,KAAKgO,YAAYvR,GAAQyR,EAmD7B,SAAsBtD,EAAyBuD,GAC7C,MAAM1F,EAAK2F,IAAKD,GAChBE,IAAIzD,EAA6B,CAAE0D,UAAU,GAAS7F,GACtD4F,IAAIzD,EAA6B,CAAE2D,UAAU,GAAS9F,EACxD,CAnDI+F,CAAaxO,MAAOqN,GAA0Ba,EAAUO,QAAQpB,QAAU3P,KAEnEwQ,CACT,CAGAQ,aAAajS,GAEX,IAAKA,EACH,MAAM,IAAI8C,MAAM,4CAElB,GAAIS,KAAKgO,YAAYvR,GACnB,MAAM,IAAI8C,MAA+C,yCAAA9C,qBAG3DuD,KAAKgO,YAAYvR,GAAQmR,CAC3B,CAEApF,QAEA,CAEAT,OAAO2F,EAAc1C,EAA2B2C,GAC9C,MAAM,KAAElR,EAAI,KAAE8B,GAASmP,EAEvB,IAAKjR,EAEH,OADA2E,OAAOuN,QAAQC,KAAwD,mDAAAlB,MAChEC,IAIT,MAAMO,EAAYlO,KAAKgO,YAAYvR,GACnC,OAAKyR,GAMDA,IAAcN,GAChBM,EAAUjG,KAAK1J,GAGVoP,MATLvM,OAAOuN,QAAQC,KAAoD,+CAAAnS,MAC5DkR,IASX,E,qECzFK,SAASkB,EAASjE,GACvB,OAAkB,OAAXA,GAAqC,kBAAXA,GAA8C,oBAAhBA,EAAOkE,IACxE,CAUO,SAASC,EAAenE,GAC7B,OATK,SAA0BA,GAC/B,OAAOiE,EAASjE,KAA+B,IAApBA,EAAO2D,UAA+C,oBAAlB3D,EAAO7C,QAA0D,kBAA1B6C,EAAOoE,cAC/G,CAOSC,CAAiBrE,IALnB,SAA0BA,GAC/B,OAAOiE,EAASjE,KAA+B,IAApBA,EAAO0D,UAA8C,oBAAjB1D,EAAOpC,OAAyD,kBAA1BoC,EAAOsE,cAC9G,CAGqCC,CAAiBvE,EACtD,CCfA,IAAAwE,EACU,CACNC,aAAcA,IAAc,mCAC5BC,wBAAyBA,IAAc,yDACvCC,gBAAkBtR,GACf,gFAA+EA,kCAClFuR,oBAAqBA,IAAc,8CACnCC,eAAiBC,GAAuC,mDAAkDA,KAC1GC,mBAAoBA,IAA8D,iDAClFC,qBAAsBA,IAAyD,4CAC/EC,qBAAsBA,IAAqE,wDAC3FC,oBAAqBA,IAA4D,+CACjFC,oBAAsB9R,GAA4B,+CAA8CA,OAZpGmR,EAcQ,CACJY,UAAYrP,GAA6B,sCAAqCA,OCZ3E,MASMsP,EAAkB,CAC7BC,WAAY,aACZC,YAAa,cACbC,QAAS,WASEC,EAAkB,CAC7BC,YAAa,cACbC,SAAU,WACVC,aAAc,eACdC,UAAW,aC2Bb,IAAAC,EAAe,CACbC,sBAAuB,CDXf,SAEA,SACC,WCSTC,IAAK,qBACLC,aAxDmB,CACnBC,GAAI,CACFC,MAAO,CACLC,SAAU,WACVC,eAAgB,yBAChBC,cAAe,yDACfC,gBAAiB,mBACjBC,cAAe,oEACfC,UAAW,cAGfC,GAAI,CACFP,MAAO,CACLC,SAAU,aACVC,eAAgB,6BAChBC,cAAe,2EACfC,gBAAiB,sBACjBC,cAAe,uFACfC,UAAW,cAGfE,GAAI,CACFR,MAAO,CACLC,SAAU,2BACVC,eAAgB,6CAChBC,cAAe,2KACfC,gBAAiB,6CACjBC,cAAe,4LACfC,UAAW,6BAGfG,GAAI,CACFT,MAAO,CACLC,SAAU,2BACVC,eAAgB,4BAChBC,cAAe,sIACfC,gBAAiB,4BACjBC,cAAe,2KACfC,UAAW,qCAGfI,GAAI,CACFV,MAAO,CACLC,SAAU,eACVC,eAAgB,2BAChBC,cAAe,yGACfC,gBAAiB,qBACjBC,cAAe,oHACfC,UAAW,8BASfK,aAAc,GACdC,sBAAwB,UC1D1B5W,EAAe6W,IAAAA,UAAmB,gBCuD3B,MAAMC,EAAcA,IAAcjQ,KAAKC,SAASC,SAAS,IAAIC,MAAM,GAE7D+P,EAAcjW,UACzB,IAAIkW,EACA/W,EAGJ,OAAQgX,GACN,IAAK,UACHD,EAAW,gCACX/W,EAAW,QACX,MACF,IAAK,cACH+W,EAAW,wBACX/W,EAAW,QACX,MACF,QACE+W,EAAkC,wBAClC/W,EAAW,QAGf,MAAO,CAAE+W,WAAU/W,WAAU,EAclBiX,EAAkC,CAAEC,OAAQ,IAAKC,MAAO,KACxDC,EAAiC,CAAEF,OAAQ,IAAKC,MAAO,MACvDE,EAAgC,CAAEH,OAAQ,IAAKC,MAAO,MACtDG,EAA0B,CAAEJ,OAAQ,IAAKC,MAAO,KAiCtD,SAASI,EAAgB5L,GAAqE,IAAlEwL,MAAOK,EAAGN,OAAQO,GAAsC9L,EAEzF,MAAM+L,OAAuChV,IAAtB0D,OAAOuR,WAA2BvR,OAAOuR,WAAavR,OAAOwR,QAC9EC,OAAqCnV,IAArB0D,OAAO0R,UAA0B1R,OAAO0R,UAAY1R,OAAO2R,QAE3EZ,EAAQ/Q,OAAO4R,WACjB5R,OAAO4R,WACPC,SAASC,gBAAgBC,YACzBF,SAASC,gBAAgBC,YACzB/R,OAAOgS,OAAOjB,MAEZD,EAAS9Q,OAAOiS,YAClBjS,OAAOiS,YACPJ,SAASC,gBAAgBI,aACzBL,SAASC,gBAAgBI,aACzBlS,OAAOgS,OAAOlB,OAIZqB,EAAO3R,KAAK4R,KAAKrB,EAAQK,GAAK,EAFjB,EAEkCE,GAGrD,MAD8E,6DAAAD,EAJ3D,WAImFD,EAJnF,SAGP5Q,KAAK4R,KAAKtB,EAASO,GAAK,EAHjB,EAGkCI,WACmFU,GAE1I,CChIA,MAAeE,UAAkDvK,EAY/DxC,YAAYgN,EAAwB/M,GAAgF,IAA9E,kBAAE+I,EAAoB,IAAG,kBAAEiE,EAAoB,YAA6BhN,EAEhH,GADAzD,SAZF8D,EAAAA,EAAAA,GAAA,wBAAAA,EAAAA,EAAAA,GAAA,2BAAAA,EAAAA,EAAAA,GAAA,wCAAAA,EAAAA,EAAAA,GAAA,uBAaO+H,EAAe2E,GAClB,MAAM,IAAInU,MAAM6P,EAAgBI,uBAElCxP,KAAK4T,SAAU,EACf5T,KAAK6T,gBAAgBnE,GAErB1P,KAAK8T,eAAiB9T,KAAK8T,eAAerM,KAAKzH,MAC/CA,KAAK+T,kBAAoB/T,KAAK+T,kBAAkBtM,KAAKzH,MACrDA,KAAKgU,wBAA0BhU,KAAKgU,wBAAwBvM,KAAKzH,MAEjEA,KAAKiU,YAAcjU,KAAKiU,YAAYxM,KAAKzH,MACzCA,KAAKkU,iBAAmBlU,KAAKkU,iBAAiBzM,KAAKzH,MAEnDA,KAAKa,QAAUb,KAAKa,QAAQ4G,KAAKzH,MACjCA,KAAKmU,UAAYnU,KAAKmU,UAAU1M,KAAKzH,MAIrC,MAAMoU,EAAM,IAAItG,EAChBuG,IACEX,EACAU,EACAV,EACA1T,KAAKgU,wBAAwBvM,KAAKzH,KAAM,UAI1CoU,EAAI1F,aAAa,YAKjB,MAAM4F,EAAoB5J,IAC1B2J,IACEC,EAAkB1J,OAClBwJ,EAAInG,aAAa0F,GACjBW,EAAkB1J,OAClB5K,KAAKgU,wBAAwBvM,KAAKzH,KAAM,sBAI1C,MAAMuU,EAAY,IAAI7I,EACtB6I,EAAUtM,MV6CL,CAACuD,EAAKT,EAAKU,EAAM+I,KACtB,MAAMC,EAAajJ,EAAIpM,GACjBsV,EAAQ9S,KAAKC,SAASC,SAAS,IAAIC,MAAM,GAC/CyJ,EAAIpM,GAAKsV,EACT3J,EAAI3L,GAAKsV,EACTjJ,GAAMkJ,IACJnJ,EAAIpM,GAAKqV,EACT1J,EAAI3L,GAAKqV,EACTE,GAAM,GACN,IUrDFJ,EAAUtM,MD/DL,CAACuD,EAAKT,EAAKU,KAEU,kBAAfD,EAAIvN,QAAwBuN,EAAIvN,SACzC8M,EAAI5O,MAAQyY,EAAAA,GAAUC,IAAIC,eAAe,CACvCpS,QAA2D,mDAC3DnE,KAAMiN,KAIVC,GAAMkJ,IACJ,MAAM,MAAExY,GAAU4O,EAClB,OAAK5O,GAGLpB,EAAIoB,MAA4B,sBAAAA,EAAMuG,UAAWvG,GAC1CwY,KAHEA,GAGI,GACb,ICgDFJ,EAAUtM,MAAK8M,EAAAA,EAAAA,IAAuB,CAAE1Y,OAAQgF,SAAShF,UACzDkY,EAAUtM,KAAKqM,EAAkB/I,YACjCvL,KAAKgV,WAAaT,EAElBvU,KAAKiV,wBAA0BX,EAAkBhL,MACnD,CAMAzN,cAAgCkN,GAC9B,IAAKA,GAAwB,kBAATA,GAAqBvD,MAAMC,QAAQsD,GACrD,MAAM6L,EAAAA,GAAUC,IAAIC,eAAe,CACjCpS,QAAS0M,EAAgBO,qBACzBpR,KAAMwK,IAIV,MAAM,OAAE9K,EAAM,OAAEwE,GAAWsG,EAE3B,GAAsB,kBAAX9K,GAAyC,IAAlBA,EAAOR,OACvC,MAAMmX,EAAAA,GAAUC,IAAIC,eAAe,CACjCpS,QAAS0M,EAAgBQ,uBACzBrR,KAAMwK,IAIV,QAAerL,IAAX+E,IAAyB+C,MAAMC,QAAQhD,KAA8B,kBAAXA,GAAkC,OAAXA,GACnF,MAAMmS,EAAAA,GAAUC,IAAIC,eAAe,CACjCpS,QAAS0M,EAAgBS,uBACzBtR,KAAMwK,IAIV,OAAO,IAAI9J,SAAQ,CAACsL,EAASpL,KAC3Ba,KAAKiU,YAAY,CAAEhW,SAAQwE,UAAU6H,EAAsBC,EAAsCpL,GAAwC,GAE7I,CAOA+V,KAAKhU,EAA+ByM,GAClC3N,KAAKiU,YAAY/S,EAASyM,EAC5B,CAOAwG,UAAUjT,GACR,OAAO,IAAIjC,SAAQ,CAACsL,EAASpL,KAC3Ba,KAAKiU,YAAY/S,EAASoJ,EAAsBC,EAAsCpL,GAAwC,GAElI,CAOU6U,wBAAwBmB,EAAoBhZ,IDpGjD,SAAoCiZ,EAAqBjZ,EAAckZ,GAC5E,IAAIC,EAA2C,8BAAAF,MACtC,OAALjZ,QAAK,IAALA,GAAAA,EAAOkO,QACTiL,GAAe,KAAInZ,EAAMkO,SAE3BtP,EAAI6T,KAAK0G,GACLD,GAAWA,EAAQE,cAAc,SAAW,GAC9CF,EAAQ/R,KAAK,QAASgS,EAE1B,CC4FIE,CAA2BL,EAAYhZ,EAAO6D,MAC9CA,KAAK+T,mBAAkB,EAAO5X,EAAQA,EAAMuG,aAAUhF,EACxD,ECzIK,MAAM+X,EAAoCC,IAC/C,MAAMC,EAAWvU,OAAO6R,SAAS2C,cAAc,YACzCC,EAAcH,EAAKI,OAEzB,OADAH,EAASI,UAAYF,EACdF,EAASK,QAAQC,UAAU,EAG7B,SAASC,GAA4B3Z,GAC1C,YAAyDmB,IAAjDnB,EAAqCmF,OAC/C,CCjBA,MAAMyU,WAAqBjN,EAezBxC,YAAWC,GAAiH,IAAhH,IAAE5K,EAAG,OAAE6K,EAAM,SAAEwP,EAAQ,QAAEpX,EAAU,KAA2E2H,EACxHzD,SAAQ8D,EAAAA,EAAAA,GAAA,oBAAAA,EAAAA,EAAAA,GAAA,uBAAAA,EAAAA,EAAAA,GAAA,yBAAAA,EAAAA,EAAAA,GAAA,uBAAAA,EAAAA,EAAAA,GAAA,4BAAAA,EAAAA,EAAAA,GAAA,8BAAAA,EAAAA,EAAAA,GAAA,uBACRhH,KAAKjE,IAAMA,EACXiE,KAAK4G,OAASA,GAAU,SACxB5G,KAAKoW,SAAWA,GAAY7D,EAAiBF,GAC7CrS,KAAKoB,YAAS1D,EACdsC,KAAKqW,iBAAc3Y,EACnBsC,KAAKsW,eAAgB,EACrBtW,KAAKhB,QAAUA,EACfgB,KAAKuW,aACP,CAEAA,cACEvW,KAAKqW,YAAclM,OACjBqM,aAAY,KACNxW,KAAKoB,QAAUpB,KAAKoB,OAAOqV,SAC7BC,cAAc1W,KAAKqW,aACnBhX,YAAW,KACJW,KAAKsW,eACRtW,KAAKsD,KAAK,SAEZtD,KAAKsW,eAAgB,EACrBtW,KAAKoB,YAAS1D,CAAS,GACtBsC,KAAKhB,eAEUtB,IAAhBsC,KAAKoB,QAAsBsV,cAAc1W,KAAKqW,YAAY,GAC7D,KAEP,CAEAM,OAAsB,IAAAC,EAGpB,OAFA5W,KAAKoB,OAASA,OAAOuV,KAAK3W,KAAKjE,IAAIwF,KAAMvB,KAAK4G,OAAQ5G,KAAKoW,UAC5C,QAAfQ,EAAI5W,KAAKoB,cAAM,IAAAwV,GAAXA,EAAaC,OAAO7W,KAAKoB,OAAOyV,QAC7B5X,QAAQsL,SACjB,CAEAuM,QACE9W,KAAKsW,eAAgB,EACjBtW,KAAKoB,QAAQpB,KAAKoB,OAAO0V,OAC/B,CAEAC,SAASC,GACHA,EACF5V,OAAOC,SAAS4V,QAAQjX,KAAKjE,IAAIwF,MAEjCH,OAAOC,SAASE,KAAOvB,KAAKjE,IAAIwF,IAEpC,EC3CF,MAAM2V,WAAmCzD,EA4BvC/M,YAAYgN,EAAwB/M,GAAgF,IAA9E,kBAAE+I,EAAoB,IAAG,kBAAEiE,EAAoB,YAA6BhN,EAChHzD,MAAMwQ,EAAkB,CAAEhE,oBAAmBiE,uBAE7C3M,EAAAA,EAAAA,GAAA,kCAAAA,EAAAA,EAAAA,GAAA,yBAAAA,EAAAA,EAAAA,GAAA,+BAAAA,EAAAA,EAAAA,GAAA,2BAAAA,EAAAA,EAAAA,GAAA,gCAAAA,EAAAA,EAAAA,GAAA,oCAAAA,EAAAA,EAAAA,GAAA,2BACAhH,KAAKmX,QAAMrZ,EAAAA,EAAAA,GAAA,GACNoZ,GAA2BE,eAIhCpX,KAAK+R,SAAW,GAChB/R,KAAKqX,eAAiB,GACtB,MAAMC,EAAuB5G,EAAcG,aJmBhB0G,MAC7B,IAAIC,EAAepW,OAAOqW,UAAUC,UAAY,QAChD,MAAMC,EAAgBH,EAAaI,MAAM,KAEzC,OADAJ,EAAetM,OAAO2M,UAAUC,eAAeC,KAAKrH,EAAOG,aAAc8G,EAAc,IAAMA,EAAc,GAAK,KACzGH,CAAY,EIvBuCD,IACxDvX,KAAKgY,kBAAoBV,EAAqBvG,MAC9C/Q,KAAKiY,WAAa,CAAC,EAKnBjY,KAAKkY,GAAG,WAAW,KACjBlY,KAAKmX,OAAOgB,aAAc,CAAI,IAwBhCnY,KAAKiV,wBAAwBiD,GAAG,gBArBHhX,IAC3B,MAAM,OAAEjD,EAAM,OAAEwE,GAAWvB,EAC3B,GAAIjD,IAAWma,EAAAA,GAA4BC,cAAe,CACxD,MAAM,aAAEC,EAAY,IAAEC,GAAQ9V,EAC9BzC,KAAKwY,eAAe,CAAEC,OAAQH,EAAyBC,IAAKA,GAC9D,MAAO,GAAIta,IAAWma,EAAAA,GAA4BM,cAAe,CAC/D,MAAM,SAAEC,EAAQ,IAAE5c,GAAQ0G,EAC1BzC,KAAK4Y,uBAAuBD,EAAU5c,EACxC,MAAO,GAAIkC,IAAWma,EAAAA,GAA4BS,aAChD7Y,KAAK8Y,mBAAmBrW,QACnB,GAAIxE,IAAWma,EAAAA,GAA4BW,eAAgB,CAChE,MAAM,qBAAEC,GAAyBvW,EACjCzC,KAAKmX,OAAO8B,YAAa,EACzBjZ,KAAKmX,OAAO6B,qBAAuBA,CACrC,MAAW/a,IAAWma,EAAAA,GAA4Bc,kBAChDlZ,KAAKmX,OAAO8B,YAAa,EACzBjZ,KAAKmX,OAAO6B,qBAAuB,KACnChZ,KAAKwY,iBACP,GAIJ,CAEIS,iBACF,OAAOjZ,KAAKmX,OAAO8B,UACrB,CAEIE,yBACF,OAAOnZ,KAAKmX,OAAOgC,kBACrB,CAKAhB,cACE,OAAOnY,KAAKmX,OAAOgB,WACrB,CAEAtc,uBAAuB4G,GACrB,IACE,MAAM,SAAEsP,EAAQ,eAAEsF,EAAc,oBAAE+B,EAAmB,YAAEC,GAAgB5W,EACvEzC,KAAK+R,SAAWA,EAChB/R,KAAKqX,eAAiBA,EACtBrX,KAAKoZ,oBAAsBA,EAC3BpZ,KAAKqZ,YAAcA,EACnBrZ,KAAKqZ,YAAY1R,iBAAiB,QAAQ,KAEnC3H,KAAKmX,OAAOgC,oBAAoBnZ,KAAKwY,gBAAgB,IAE5D,MAAM,qBAAEQ,EAAoB,WAAEC,SAAsBjZ,KAAKa,QAAQ,CAC/D5C,OAAQqb,EAAAA,GAA2BC,mBACnC9W,OAAQ,KAIVzC,KAAK8T,eAAekF,EAAsBC,E,CAC1C,MAAO9c,GACPpB,EAAIoB,MAAM,8DAA+DA,EAC3E,CAAE,QACApB,EAAIoC,KAAK,mCACT6C,KAAKmX,OAAOqC,aAAc,EAC1BxZ,KAAKsD,KAAK,eACZ,CACF,CAEAmW,cAAcd,GAA8G,IAA5F,IAAE5c,EAAG,OAAE6K,EAAM,SAAEwP,GAAgE5Y,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAG,MAChH,MAAMkc,EAAW,IAAIxd,IAAIH,GAAU,GAAAiE,KAAK+R,8BAA8B4G,KAClE3Y,KAAKqX,iBAEHqC,EAASC,KAAMD,EAASC,MAAS,mBAAkB3Z,KAAKqX,iBACvDqC,EAASC,KAA0B,mBAAA3Z,KAAKqX,kBAE/C,MAAMuC,EAAgB,IAAIzD,GAAa,CAAEpa,IAAK2d,EAAU9S,SAAQwP,aAChEwD,EAAcjD,OACTiD,EAAcxY,QAKnBpB,KAAKiY,WAAWU,GAAYiB,EAE5B5Z,KAAKa,QAAuC,CAC1C5C,OAAQqb,EAAAA,GAA2BO,cACnCpX,OAAQ,CAAEkW,cAEZiB,EAAcxL,KAAK,SAAS,YAEnBpO,KAAKiY,WAAWU,GACvB3Y,KAAKa,QAAuC,CAC1C5C,OAAQqb,EAAAA,GAA2BQ,cACnCrX,OAAQ,CAAEkW,aACV,KAhBF3Y,KAAK4Y,uBAAuBD,EAAUe,EAASnY,KAkBnD,CAEAiX,iBAA4F,IAA7E,OAAEC,GAAS,EAAK,IAAEF,EAAM,IAAwC/a,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAG,MAChF,MAAMuc,EAAsC,CAAC,EAE7C,GAAKtB,EAgCHsB,EAAMpX,QAAU,QAChBoX,EAAM5H,MAAQ,OACd4H,EAAM7H,OAAS,OACf6H,EAAMC,IAAM,MACZD,EAAME,MAAQ,MACdF,EAAMxG,KAAO,MACbwG,EAAMG,OAAS,WAlCf,OAHAH,EAAMpX,QAAU3C,KAAKmX,OAAOgD,sBAAwB,QAAU,OAC9DJ,EAAM7H,OAAS,OACf6H,EAAM5H,MAAQ,OACNnS,KAAKmX,OAAOiD,gBAClB,KAAK/J,EAAgBE,SACnBwJ,EAAMC,IAAM,MACZD,EAAMxG,KAAO,MACbwG,EAAME,MAAQ,OACdF,EAAMG,OAAS,OACf,MACF,KAAK7J,EAAgBI,UACnBsJ,EAAMC,IAAM,MACZD,EAAME,MAAQ,MACdF,EAAMxG,KAAO,OACbwG,EAAMG,OAAS,OACf,MACF,KAAK7J,EAAgBG,aACnBuJ,EAAMG,OAAS,MACfH,EAAME,MAAQ,MACdF,EAAMC,IAAM,OACZD,EAAMxG,KAAO,OACb,MACF,KAAKlD,EAAgBC,YACrB,QACEyJ,EAAMG,OAAS,MACfH,EAAMxG,KAAO,MACbwG,EAAMC,IAAM,OACZD,EAAME,MAAQ,OAYpB/O,OAAOC,OAAOnL,KAAKqZ,YAAYU,MAAOA,GACtC/Z,KAAKmX,OAAOgC,mBAAqBV,EACjCzY,KAAKa,QAA+D,CAClE5C,OAAQqb,EAAAA,GAA2BjB,cACnC5V,OAAQ,CAAE0W,mBAAoBV,EAAQF,QAE1C,CAEA8B,kBACEra,KAAKmX,OAAOgD,uBAAwB,EACpCna,KAAKwY,gBACP,CAEA8B,kBACEta,KAAKmX,OAAOgD,uBAAwB,EACpCna,KAAKwY,gBACP,CAMUvE,YAAY/S,EAAkEyM,GACtF,MAAMlF,EAAKkF,EACL4M,EAAWrZ,EACZsE,MAAMC,QAAQ8U,IACZA,EAASpN,UACZoN,EAASpN,QAAU,OAGvBnN,KAAKwa,gBAAgBD,EAAoC9R,EAC3D,CASUqL,eAAekF,EAA8BC,GAChDjZ,KAAKmX,OAAOgB,cACfnY,KAAKmX,OAAOgB,aAAc,EAC1BnY,KAAKsD,KAAK,UAAW,CAAE0V,uBAAsBC,eAC7Cle,EAAI0f,MAAMrL,EAAcY,UAAUgJ,IAEtC,CAaUjF,kBAAkB2G,EAAwBC,GAClD,GAAI3a,KAAKmX,OAAOgB,cAAiBnY,KAAKmX,OAAOyD,4BAA8BF,EAAgB,CAGzF,IAAIve,EAFJ6D,KAAKmX,OAAOgB,aAAc,EAGtBuC,GACFve,EAAQ,IAAI0e,EAAAA,GACV,KACAF,GAAgBvL,EAAgBC,gBAElCtU,EAAI0f,MAAMte,KAEVA,EAAQ,IAAI0e,EAAAA,GACV,KACAF,GAAgBvL,EAAgBE,2BAElCvU,EAAIoB,MAAMA,GACV6D,KAAKmX,OAAO6B,qBAAuB,KACnChZ,KAAKmX,OAAO8B,YAAa,EACzBjZ,KAAKmX,OAAOgD,uBAAwB,EACpCna,KAAKmX,OAAOgC,oBAAqB,EACjCnZ,KAAKmX,OAAOyD,2BAA4B,GAG1C5a,KAAKsD,KAAK,aAAcnH,EAC1B,CACF,CAGQ2c,mBAAmBrW,GACzB,MAAM,SAAEkW,GAAalW,EACjBzC,KAAKiY,WAAWU,KAClB3Y,KAAKiY,WAAWU,GAAU7B,eACnB9W,KAAKiY,WAAWU,GAE3B,CAEA,6BAAqCA,EAAkB5c,GACrD,MAAM+e,EAAU9a,KAAK+a,aACfC,EAAavF,EAEyB,qFAAAqF,8CAEV9a,KAAKgY,kBAAkB/G,+CACzBjR,KAAKgY,kBAAkB9G,iCAKjD+J,EAAexF,EAAe,gCAA+BzV,KAAKgY,kBAAkBhH,sBACpFkK,EAAezF,EAAc,8CACnCyF,EAAaC,YAAYF,GACzBD,EAAWG,YAAYD,GAaFE,MACnBpb,KAAKoZ,oBAAoB+B,YAAYH,EAAW,EAGlDI,GAhBmBC,MACjBJ,EAAatT,iBAAiB,SAAS,KACrC3H,KAAKyZ,cAAcd,EAAU,CAC3B5c,MACA6K,OAAQ,SACRwP,SAAU7D,EAAiBD,KAE7B0I,EAAWM,SACsC,IAA7Ctb,KAAKoZ,oBAAoBmC,SAAS9d,SAAcuC,KAAKoZ,oBAAoBW,MAAMpX,QAAU,OAAM,GACnG,EAQJ0Y,GACArb,KAAKoZ,oBAAoBW,MAAMpX,QAAU,OAC3C,CAEQoY,aAEN,MADiB,GAAE/a,KAAK+R,qCAE1B,GACD/K,EAAAA,EAAAA,GAtUKkQ,GACyD,iBAC3DkD,eAAgB,cAChBpB,qBAAsB,KACtBG,oBAAoB,EACpBqC,sBAAsB,EAEtBrB,uBAAuB,EACvBX,aAAa,EACbP,YAAY,EACZ2B,2BAA2B,EAC3BzC,aAAa,ICvBjB,MAAMsD,WAA4BhI,EAyBhC/M,YAAYgN,EAAwB/M,GAAgF,IAA9E,kBAAE+I,EAAoB,IAAG,kBAAEiE,EAAoB,YAA6BhN,EAChHzD,MAAMwQ,EAAkB,CAAEhE,oBAAmBiE,uBAhB/C3M,EAAAA,EAAAA,GAAA,wBAMAA,EAAAA,EAAAA,GAAA,gCAAAA,EAAAA,EAAAA,GAAA,+BAaEhH,KAAKmX,QAAMrZ,EAAAA,EAAAA,GAAA,GACN2d,GAAoBrE,eAIzBpX,KAAK0b,gBAAkB,KACvB1b,KAAKW,QAAU,KAEfX,KAAK2b,uBAAyB3b,KAAK2b,uBAAuBlU,KAAKzH,MAC/DA,KAAK4b,oBAAsB5b,KAAK4b,oBAAoBnU,KAAKzH,MACzDA,KAAK6b,0BAA4B7b,KAAK6b,0BAA0BpU,KAAKzH,MAKrEA,KAAKkY,GAAG,WAAW,KACjBlY,KAAKmX,OAAOgB,aAAc,CAAI,IAehCnY,KAAKiV,wBAAwBiD,GAAG,gBAZIhX,IAClC,MAAM,OAAEjD,EAAM,OAAEwE,GAAWvB,EACvBjD,IAAW6d,EAAAA,GAAuBC,iBACpC/b,KAAK2b,uBAAuBlZ,GACnBxE,IAAW6d,EAAAA,GAAuBE,qBAC3Chc,KAAK6b,0BAA0BpZ,GACtBxE,IAAW6d,EAAAA,GAAuBG,eAC3Cjc,KAAK4b,oBAAoBnZ,EAC3B,GAKJ,CAKA0V,cACE,OAAOnY,KAAKmX,OAAOgB,WACrB,CASAtc,yBACE,IACE,MAAM,SAAE+E,EAAQ,QAAED,EAAO,WAAEub,SAAsBlc,KAAKa,QAAQ,CAC5D5C,OAAQke,EAAAA,GAAsB5C,mBAC9B9W,OAAQ,KAIVzC,KAAKsD,KAAK,UAAW,CAAE3C,YAEvBX,KAAK4b,oBAAoB,CAAEjb,YAC3BX,KAAK6b,0BAA0B,CAAEjb,WAAUsb,eAC3Clc,KAAK2b,uBAAuB/a,E,CAC5B,MAAOzE,GACPpB,EAAIoB,MAAM,8DAA+DA,EAC3E,CAAE,QACApB,EAAIoC,KAAK,8BACT6C,KAAKmX,OAAOqC,aAAc,EAC1BxZ,KAAKsD,KAAK,eACZ,CACF,CAMA2Q,YAAY/S,EAAkEyM,GAAkE,IAA1ByO,EAAU5e,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAC1HiL,EAAKkF,EACT,MAAM4M,EAAWrZ,EACjB,IAAKsE,MAAMC,QAAQ8U,GAKjB,GAJKA,EAASpN,UACZoN,EAASpN,QAAU,OAGG,oBAApBoN,EAAStc,QAAoD,2BAApBsc,EAAStc,OAEpDwK,EAAMA,CAACP,EAAY6C,KACjB/K,KAAK2b,uBAAuB5Q,EAAIN,QAAU,GAAwB,oBAApB8P,EAAStc,OAA8Bme,GACrFzO,EAASzF,EAAK6C,EAAI,OAEf,GAAwB,4BAApBwP,EAAStc,OAElB,YADA+B,KAAKgV,WAAW3I,OAAOnL,EAAiCuH,GAI5DzI,KAAKwa,gBAAgBD,EAAU9R,EACjC,CASUqL,eAAenT,GAClBX,KAAKmX,OAAOgB,cACfnY,KAAKmX,OAAOgB,aAAc,EAC1BnY,KAAKsD,KAAK,UAAW,CAAE3C,YACvB5F,EAAI0f,MAAMrL,EAAcY,UAAUrP,IAEtC,CAaUoT,kBAAkB2G,EAAwBC,GAClD,GAAI3a,KAAKmX,OAAOgB,cAAiBnY,KAAKmX,OAAOyD,4BAA8BF,EAAgB,CAGzF,IAAIve,EAFJ6D,KAAKmX,OAAOgB,aAAc,EAGtBuC,GACFve,EAAQ,IAAI0e,EAAAA,GACV,KACAF,GAAgBvL,EAAgBC,gBAElCtU,EAAI0f,MAAMte,KAEVA,EAAQ,IAAI0e,EAAAA,GACV,KACAF,GAAgBvL,EAAgBE,2BAElCvU,EAAIoB,MAAMA,GACV6D,KAAKW,QAAU,KACfX,KAAKmX,OAAOvW,SAAW,KACvBZ,KAAK0b,gBAAkB,KACvB1b,KAAKmX,OAAO+E,YAAa,EACzBlc,KAAKmX,OAAOyD,2BAA4B,GAG1C5a,KAAKsD,KAAK,aAAcnH,EAC1B,CACF,CAKUwf,uBAAuB/a,GAAsE,IAAjDyb,EAAa7e,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAAU4e,EAAU5e,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAEjF8e,EAAgB1b,EACf4E,MAAMC,QAAQ6W,KACjBvhB,EAAIoB,MAAM,wEAAyEmgB,GACnFA,EAAgB,IAGlB,IAAK,MAAMC,KAAW3b,EACpB,GAAuB,kBAAZ2b,EAAsB,CAC/BxhB,EAAIoB,MAAM,8DAA+DyE,GACzE0b,EAAgB,GAChB,KACF,CAIGE,IAAOxc,KAAKmX,OAAOvW,SAAU0b,KAG5BD,GAAiB7W,MAAMC,QAAQzF,KAAKmX,OAAOvW,WAAaZ,KAAKmX,OAAOvW,SAASnD,OAAS,IAAM2e,GAC9FrhB,EAAIoB,MAAM,kFAAmFmgB,GAG/Ftc,KAAKmX,OAAOvW,SAAW0b,EACvBtc,KAAKsD,KAAK,kBAAmBgZ,IAI3Btc,KAAK0b,kBAAoBY,EAAc,KACzCtc,KAAK0b,gBAAmBY,EAAc,IAAiB,KAE3D,CAWUV,sBAAkE,IAA9C,QAAEjb,GAA+BnD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAG,MAC3DmD,EAKW,YAAZA,EACFX,KAAK+T,mBAAkB,IAEvB/T,KAAK8T,eAAenT,GAEhBA,IAAYX,KAAKW,UACnBX,KAAKW,QAAUA,EACXX,KAAKmX,OAAOqC,aACdxZ,KAAKsD,KAAK,eAAgBtD,KAAKW,WAZnC5F,EAAIoB,MAAM,sEAAuE,CAAEwE,WAgBvF,CAYUkb,4BAA8G,IAApF,SAAEjb,EAAQ,WAAEsb,GAA2D1e,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAG,MAClF,mBAAf0e,EAKPA,IAAelc,KAAKmX,OAAO+E,aAC7Blc,KAAKmX,OAAO+E,WAAaA,EACzBlc,KAAK2b,uBAAuB/a,GAAY,KANxC7F,EAAIoB,MAAM,wEAAyE,CAAE+f,cAQzF,ECjRF,SAASO,GAAU1gB,GACjB,OAAO,IAAIkD,SAAQ,CAACsL,EAASpL,KAC3B,IACE,MAAMud,EAAMzJ,SAAS2C,cAAc,OACnC8G,EAAIC,OAAS,IAAMpS,GAAQ,GAC3BmS,EAAIE,QAAU,IAAMrS,GAAQ,GAC5BmS,EAAIG,IAAM9gB,C,CACV,MAAO+gB,GACP3d,EAAO2d,EACT,IAEJ,EDuQC9V,EAAAA,EAAAA,GA1QKyU,GACkD,iBACpD7a,SAAU,KACVuX,aAAa,EACb+D,YAAY,EACZ1C,aAAa,EACboB,2BAA2B,EAC3BY,sBAAsB,ICC1B,MAAMuB,GAAe3b,IACnB,MAAM,SAAE6R,GAAa7R,EAEf4b,EAAW/J,EAASgK,cAA+B,wCACzD,GAAID,EACF,OAAOA,EAAShH,QAGlB,MAAMkH,EAAYjK,EAASgK,cAA+B,6BAC1D,OAAIC,EACKA,EAAUlH,QAGf/C,EAASkK,OAASlK,EAASkK,MAAM1f,OAAS,EACrCwV,EAASkK,MAGX/b,EAAOC,SAAS+b,QAAQ,EAMjCvhB,eAAewhB,GAAYjc,GACzB,IACE,MAAM,SAAE6R,GAAa7R,EAGrB,IAAIkc,EAAOrK,EAASgK,cAA+B,oCACnD,OAAIK,SAAeb,GAAUa,EAAK/b,MACzB+b,EAAK/b,MAId+b,EAAO9X,MAAME,KAAKuN,EAASsK,iBAAkC,4BAA4BC,MAAMC,GAAUC,QAAQD,EAAMlc,QACnH+b,SAAeb,GAAUa,EAAK/b,MACzB+b,EAAK/b,KAGP,G,CACP,MAAOpF,GACP,MAAO,EACT,CACF,CAMA,MC/BMwhB,GAA0B,CAAC,mBAAoB,mBAAoB,wBAAyB,eAAgB,WAC5GC,GAA+B,CAACtE,EAAAA,GAA2BuE,cAE3DC,GPyDC,SAA0B1U,GAC/B,IAAI2U,EACJ,IACEA,EAAU3c,OAAOgI,GACjB,MAAMnF,EAAI,mBAGV,OAFA8Z,EAAQC,QAAQ/Z,EAAGA,GACnB8Z,EAAQE,WAAWha,IACZ,C,CACP,MAAO9H,GACP,MAAM2gB,EAAI3gB,EACV,OACE2gB,IAEY,KAAXA,EAAE5S,MAEU,OAAX4S,EAAE5S,MAGS,uBAAX4S,EAAErgB,MAES,+BAAXqgB,EAAErgB,OAEJshB,GACmB,IAAnBA,EAAQtgB,MAEZ,CACF,COnFgCygB,CAAiB,iBAGjD,iBACE,IACE,GAAwB,qBAAbjL,SAA0B,OACrC,MAAMkL,EAAkBlL,SAAS2C,cAAc,SACzC,SAAE7D,SAAmBD,EAAY,cACvCqM,EAAgB5c,KAAQ,GAAEwQ,UAC1BoM,EAAgBC,YAAc,YAC9BD,EAAgB/U,KAAO,YACvB+U,EAAgBE,IAAM,WAClBF,EAAgBG,SAAWH,EAAgBG,QAAQC,UACjDJ,EAAgBG,QAAQC,SAAS,aACnCtL,SAASuL,KAAKrD,YAAYgD,E,CAG9B,MAAOhiB,GACPpB,EAAI6T,KAAKzS,EACX,CACD,CAjBD,GAmBA,MAAMsiB,GA2BJ/X,cAAyD,IAA7C,YAAEgY,EAAc,OAAsBlhB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAG,OAAEwJ,EAAAA,EAAAA,GAAA,8BAAAA,EAAAA,EAAAA,GAAA,2BAAAA,EAAAA,EAAAA,GAAA,4BAAAA,EAAAA,EAAAA,GAAA,4BAAAA,EAAAA,EAAAA,GAAA,uCAAAA,EAAAA,EAAAA,GAAA,yBAAAA,EAAAA,EAAAA,GAAA,sCAAAA,EAAAA,EAAAA,GAAA,+BAAAA,EAAAA,EAAAA,GAAA,sBAVvC,IAAKA,EAAAA,EAAAA,GAAA,oCAAAA,EAAAA,EAAAA,GAAA,yBAAAA,EAAAA,EAAAA,GAAA,4BAAAA,EAAAA,EAAAA,GAAA,yBAWnBhH,KAAK+R,SAAW,GAChB/R,KAAK2e,eAAgB,EACrB3e,KAAK4e,uBAAyB,KAC9B5e,KAAK0e,YAAcA,EACnB1e,KAAK6e,YAAcH,EAAc,IACjC1e,KAAKqX,eAAiB,EACxB,CAEI4B,iBACF,QAAKjZ,KAAK8e,uBACH9e,KAAK8e,sBAAsB7F,UACpC,CAEApd,aAUoC,IAVzB,SACTmW,EAAW/B,EAAgBC,WAAU,cACrC6O,GAAgB,EAAK,QACrBC,EAAO,gBACP1E,GAAkB,EAAK,gBACvB2E,GAAkB,EAAK,eACvB7E,EAAiB/J,EAAgBC,YAAW,OAC5ClV,EAAS,gBAAe,YACxB8jB,EAAc,CAAC,EAAC,WAChBC,GACY3hB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAG,MACf,GAAIwC,KAAK2e,cAAe,MAAM,IAAIpf,MAAM,wBACxC9D,EAAAA,EAAAA,IAAUL,GACV,MAAM,SAAE2W,EAAQ,SAAE/W,SAAmB8W,EAAYE,GACjDjX,EAAIqkB,YACJrkB,EAAIoC,KAAK4U,EAAU,cACnBhX,EAAIoC,KAA8B,+BAClC6C,KAAK+R,SAAWA,EAChBhX,EAAIskB,gBAAgBrkB,GAChB+jB,EAAehkB,EAAIqkB,YAClBrkB,EAAIukB,aACT,MAAMjI,EAAiBrX,KAAKuf,qBAAqBN,GAE3CO,EAAiB,IAAItjB,IAAI6V,GAC3ByN,EAAeljB,SAASmjB,SAAS,KAAMD,EAAeljB,UAAY,QACjEkjB,EAAeljB,UAAY,SAEhC,MAAMojB,EAAa,IAAIC,gBAsBvB,OArBItI,GAAgBqI,EAAWE,OAAO,iBAAkBvI,GACxDqI,EAAWE,OAAO,SAAUxe,OAAOC,SAAShF,QAE5CmjB,EAAe7F,KAAO+F,EAAW5d,WAGjC9B,KAAKqZ,YAAc5D,EAChB,gFAGQ+J,EAAeje,wJAEmCvB,KAAK0e,YAAY5c,iCAI9E9B,KAAKoZ,oBAAsB3D,EACsC,+DAAAzV,KAAK6e,YAAY/c,sBAGlF9B,KAAK6f,UAAYpK,EAA8C,eAAA1D,uDACxD,IAAI9S,SAAc,CAACsL,EAASpL,KACjC,IACEa,KAAKqZ,YAAY1R,iBAAiB,QAAQ9L,UACxC,MAAMikB,ODvFQjkB,WAAA,CACtBY,KAAMsgB,GAAY3b,QAClBkc,WAAYD,GAAYjc,UCqFW2e,GAE3B/f,KAAKqZ,YAAY2G,cAAc1X,YAC7B,CACE8R,iBACAhf,SACA4jB,UACAc,eACAZ,cACAC,cAEFK,EAAenjB,cAEX2D,KAAKigB,WAAW,CACpBlO,aAEEuI,GAAiBta,KAAKsa,kBACZ,OAAV6E,QAAU,IAAVA,GAAAA,EAAYe,UAAWlgB,KAAKmgB,cAAgBhB,EAAWe,UACtDlgB,KAAKqa,kBACVra,KAAK2e,eAAgB,EAEpBvd,OAAegf,MAAQpgB,KACxBuK,GAAS,IAEXnJ,OAAO6R,SAASuL,KAAKrD,YAAYnb,KAAK6f,WACtCze,OAAO6R,SAASvU,KAAKyc,YAAYnb,KAAKqZ,aACtCjY,OAAO6R,SAASvU,KAAKyc,YAAYnb,KAAKoZ,oB,CACtC,MAAOjd,GACPgD,EAAOhD,EACT,IAEJ,CAEAN,cAA8D,IAAlD4G,EAAwBjF,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACtC,IAAKwC,KAAK2e,cAAe,MAAM,IAAIpf,MAAM,qBACzC,IACES,KAAK4e,uBAAyBnc,EAAO4d,eAAiB,KACjDrgB,KAAK4e,wBACR5e,KAAK8e,sBAAsBtG,eAAe,CAAEC,QAAQ,IAGtD,MAAM1N,QAAY,IAAI9L,SAAQ,CAACsL,EAASpL,KAEtCa,KAAKK,SAAS4T,YACZ,CAAEhW,OAAQ,yBAA0BwE,OAAQ,CAACzC,KAAK4e,uBAAwBnc,EAAO6d,aACjFhW,EAAsBC,EAAsCpL,GAC7D,IAGH,GAAIqG,MAAMC,QAAQsF,IAAQA,EAAItN,OAAS,EACrC,OAAOsN,EAGT,MAAM,IAAIxL,MAAM,e,CAChB,MAAOpD,GAEP,MADApB,EAAIoB,MAAM,eAAgBA,GACpBA,CACR,CAAE,QACI6D,KAAK8e,sBAAsB3F,oBAAoBnZ,KAAK8e,sBAAsBtG,gBAChF,CACF,CAEA3c,0BAA0B0kB,GACxB,IAAKvgB,KAAK2e,cAAe,MAAM,IAAIpf,MAAM,qBACzC,MAAM,WAAEihB,EAAU,SAAEC,GAAaF,GAC3B,QAAEG,SAAkB1gB,KAAK8e,sBAAsBje,QAA0E,CAC7H5C,OAAQ,yBACRwE,OAAQ,CACN+d,aACAC,cAGJ,IAAKC,EAAS,MAAM,IAAInhB,MAAM,eAChC,CAEA1D,eACE,IAAKmE,KAAK8e,sBAAsB7F,WAAY,MAAM,IAAI1Z,MAAM,uBAEtDS,KAAK8e,sBAAsBje,QAAQ,CACvC5C,OAAQqb,EAAAA,GAA2BqH,OACnCle,OAAQ,KAEVzC,KAAK4e,uBAAyB,IAChC,CAEA/iB,gBACMmE,KAAK8e,sBAAsB7F,kBACvBjZ,KAAK4gB,SAEb5gB,KAAK6gB,WACP,CAEAA,YACE,SAASC,EAAUC,GACjB,OAAOA,aAAmBC,SAAWD,aAAmBE,QAC1D,CACIH,EAAU9gB,KAAK6f,YAAcze,OAAO6R,SAASvU,KAAKwiB,SAASlhB,KAAK6f,aAClE7f,KAAK6f,UAAUvE,SACftb,KAAK6f,eAAYniB,GAEfojB,EAAU9gB,KAAKqZ,cAAgBjY,OAAO6R,SAASvU,KAAKwiB,SAASlhB,KAAKqZ,eACpErZ,KAAKqZ,YAAYiC,SACjBtb,KAAKqZ,iBAAc3b,GAEjBojB,EAAU9gB,KAAKoZ,sBAAwBhY,OAAO6R,SAASvU,KAAKwiB,SAASlhB,KAAKoZ,uBAC5EpZ,KAAKgb,gBAAatd,EAClBsC,KAAKoZ,oBAAoBkC,SACzBtb,KAAKoZ,yBAAsB1b,GAE7BsC,KAAK2e,eAAgB,CACvB,CAEAtE,kBACEra,KAAK8e,sBAAsBzE,iBAC7B,CAEAC,kBACEta,KAAK8e,sBAAsBxE,iBAC7B,CAEAze,kBAAkB4G,SACVzC,KAAK8e,sBAAsBje,QAAQ,CACvC5C,OAAQqb,EAAAA,GAA2BuE,aACnCpb,QAAM3E,EAAAA,EAAAA,GAAA,GAAO2E,IAEjB,CAEA5G,iBAAiBslB,GAAuE,IAApD1e,EAA8BjF,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACpE,MAAM4jB,QAAmBphB,KAAK8e,sBAAsBje,QAAoB,CACtE5C,OAAQqb,EAAAA,GAA2B+H,mBACnC5e,OAAQ,KAEJ6e,EAAYH,EAAQ,IAAGA,IAAS,GAEhCzH,EAAW,IAAIxd,IAAK,GAAE8D,KAAK+R,kBAAkBuP,KAEnD5H,EAAS6H,aAAa3B,OAAO,aAAcwB,GAC3ClW,OAAOsW,KAAK/e,GAAQgf,SAASxd,IAC3ByV,EAAS6H,aAAa3B,OAAO3b,EAAGxB,EAAOwB,GAAG,IAExCjE,KAAKqX,iBACPqC,EAASC,KAAQ,mBAAkB3Z,KAAKqX,kBAGrB,IAAIlB,GAAa,CAAEpa,IAAK2d,EAAUtD,SAAU7D,EAAiBH,KACrEuE,MACf,CAEA9a,oBAKE,aAJ+BmE,KAAK8e,sBAAsBje,QAAsB,CAC9E5C,OAAQqb,EAAAA,GAA2BoI,UACnCjf,OAAQ,IAGZ,CAEA5G,oBAAoBwE,EAAiCoC,GACnD,IAAKzC,KAAK2e,cAAe,MAAM,IAAIpf,MAAM,4BACzC,MAAMoZ,EAAW9G,IACjB7R,KAAK8e,sBAAsBrF,cAAcd,GAQzC,aAP4B3Y,KAAK8e,sBAAsBje,QAGrD,CACA5C,OAAQqb,EAAAA,GAA2BqI,MACnClf,OAAQ,CAAEpC,WAAUoC,SAAQkW,aAGhC,CAGA9c,oBAKE,aAJwBmE,KAAKK,SAASQ,QAAQ,CAC5C5C,OAAQ,cACRwE,OAAQ,IAGZ,CAEA5G,sBAAsBU,GACpB,MAAMqlB,EAAsB1L,GAA4B3Z,GAClDmG,EAAUkf,EACXrlB,EAA4BslB,UAAU,CAAEC,sBAAsB,IAAShgB,SAAS,OACjFigB,EAAOrc,KAAMnJ,EAAqCslB,aAAa/f,SAAS,OAK5E,aAJwB9B,KAAKK,SAASQ,QAAQ,CAC5C5C,OAAQ,mBACRwE,OAAQ,CAAEC,UAASkf,wBAGvB,CAGA/lB,6BAA6BU,EAAgDwB,GAC3E,MAAM6jB,EAAsB1L,GAA4B3Z,GAElDmG,EAAUkf,EACXrlB,EAA4BslB,UAAU,CAAEC,sBAAsB,IAAShgB,SAAS,OACjFigB,EAAOrc,KAAMnJ,EAAqCslB,aAAa/f,SAAS,OAK5E,MAAO,CAAEkgB,gBAJehiB,KAAKK,SAASQ,QAAQ,CAC5C5C,OAAQ,mBACRwE,OAAQ,CAAEC,UAAS3E,UAAS6jB,yBAGhC,CAEA/lB,sBAAsBU,GACpB,MAAMqlB,EAAsB1L,GAA4B3Z,GAElDmG,EAAUkf,EACXrlB,EAA4B0lB,mBAAmBngB,SAAS,OACzDigB,EAAOrc,KAAMnJ,EAAqCmG,QAAQmf,aAAa/f,SAAS,OAE9EjF,QAA0BmD,KAAKK,SAASQ,QAAQ,CACpD5C,OAAQ,mBACRwE,OAAQ,CAAEC,UAASwf,aAAa,EAAMN,yBAIlCO,EAASxjB,KAAKyjB,MAAMvlB,GACpBmlB,EAAiC,CAAEK,UAAW,IAAIC,EAAAA,GAAUH,EAAOE,WAAYL,UAAWD,EAAOrc,KAAKyc,EAAOH,UAAW,QAE9H,OADAzlB,EAAYgmB,aAAaP,EAAUK,UAAWL,EAAUA,WACjDzlB,CACT,CAEAV,0BAA0B2mB,GACxB,IAAIZ,EACJ,MAAMvf,EAAiBmgB,EAAavV,KAAKwV,IACvCb,EAAsB1L,GAA4BuM,GAC3Cb,EACFa,EAAmBR,mBAAmBngB,SAAS,OAChDigB,EAAOrc,KAAM+c,EAA4B/f,QAAQmf,aAAa/f,SAAS,UAQvE4gB,SAN4B1iB,KAAKK,SAASQ,QAAQ,CACtD5C,OAAQ,wBACRwE,OAAQ,CAAEC,QAASL,EAAgB6f,aAAa,EAAMN,0BAIJ3U,KAAK0V,IACvD,MAAMR,EAASxjB,KAAKyjB,MAAMO,GAC1B,MAAO,CAAEN,UAAW,IAAIC,EAAAA,GAAUH,EAAOE,WAAYL,UAAWD,EAAOrc,KAAKyc,EAAOH,UAAW,OAAQ,IAOxG,OAJAQ,EAAaf,SAAQ,CAACgB,EAAIG,KACxBH,EAAGF,aAAaG,EAAWE,GAAKP,UAAWK,EAAWE,GAAKZ,WACpDS,KAEFD,CACT,CAEA3mB,kBAAkB0C,GAOhB,aANwByB,KAAKK,SAASQ,QAAQ,CAC5C5C,OAAQ,eACRwE,OAAQ,CACNlE,SAIN,CAEA1C,4BAKE,aAJwBmE,KAAKK,SAASQ,QAAQ,CAC5C5C,OAAQ,yBACRwE,OAAQ,IAGZ,CAUQ8c,qBAAqBN,GAC3B,MAAM4D,EAAqB,GAAAnS,EAAciB,wBAAwBvQ,OAAOC,SAAS+b,WACjF,IAAI/F,EAAiB,GACrB,GAAIyG,IAA2BmB,EAAiB,CAC9C,MAAM6D,EAAY1hB,OAAO2hB,aAAaC,QAAQH,GAC9C,GAAIC,EAAWzL,EAAiByL,MAC3B,CACH,MAAMG,EAAgB,aAAYpR,MAClCzQ,OAAO2hB,aAAa/E,QAAQ6E,EAAiBI,GAC7C5L,EAAiB4L,CACnB,CACF,CAEA,OADAjjB,KAAKqX,eAAiBA,EACfA,CACT,CAEA,iBAAyB6L,GACvBnoB,EAAIoC,KAAK,qBAET,MAAMgmB,EAAiB,IAAI3c,EAAsB,CAC/C/J,KAAM,cACNmK,OAAQ,eACRC,aAAc7G,KAAKqZ,YAAY2G,gBAI3BoD,EAAsB,IAAI5c,EAAsB,CACpD/J,KAAM,sBACNmK,OAAQ,uBACRC,aAAc7G,KAAKqZ,YAAY2G,gBAI3BqD,EAAiB,IAAI5H,GAAoB0H,EAAgB,CAAC,GAC1DrE,EAAwB,IAAI5H,GAA2BkM,EAAqB,CAAC,GAEnFC,EAAe7I,gBAAkB,CAACtZ,EAAkEuH,KAClG,MAAM8R,EAAWrZ,EACjB,IAAKsE,MAAMC,QAAQ8U,IAAaoD,GAAwBvhB,SAASme,EAAStc,QAAS,CACjF,IAAK+B,KAAK8e,sBAAsB7F,WAAY,MAAM,IAAI1Z,MAAM,sBAC5D,MAAMoZ,EAAW9G,IACjBiN,EAAsBrF,cAAcd,EAAU,CAC5C/R,OAAQ,SACRwP,SAAU7D,EAAiBD,KAI7BiI,EAAS5B,SAAWA,CACtB,CACA0K,EAAerO,WAAW3I,OAAOkO,EAAoC9R,EAAG,EAG1EqW,EAAsBtE,gBAAmB,CAACtZ,EAA+BuH,KACvE,MAAM8R,EAAWrZ,EACjB,IAAKsE,MAAMC,QAAQ8U,IAAaqD,GAA6BxhB,SAASme,EAAStc,QAAS,CACtF,MAAM0a,EAAW9G,IACjBiN,EAAsBrF,cAAcd,EAAU,CAC5C/R,OAAQ,SACRwP,SAAU7D,EAAiBN,KAG5BsI,EAAS9X,OAAmCkW,SAAWA,CAC1D,CACAmG,EAAsB9J,WAAW3I,OAAOkO,EAAkC9R,EAAG,EAI/E,MAAM6a,EACJC,IAEA,MAAMC,EAAiBH,EAAeE,GAEhCE,EAAOzjB,KACbqjB,EAAeE,GAAK,SAAsB1iB,EAAgC4H,GACxE,MAAM,OAAExK,EAAM,OAAEwE,EAAS,IAAO5B,EAChC,GAAe,2BAAX5C,EAAqC,CACvC,IAAKwK,EAAI,OAAOgb,EAAKC,MAAM,CAAErD,cAAe5d,EAAO,KACnDghB,EACGC,MAAM,CAAErD,cAAe5d,EAAO,KAE9BhD,MAAMsL,GAAQtC,EAAG,KAAMsC,KAEvB4Y,OAAOzb,GAAQO,EAAGP,IACvB,CAGA,OAAOsb,EAAeva,MAAMjJ,KAAM,CAACa,EAAS4H,G,CAEtC,EAIV6a,EAAsC,WACtCA,EAAsC,aACtCA,EAAsC,QAEtC,MAAMM,EAAwB,IAAIC,MAAMR,EAAgB,CAGtDS,eAAgBA,KAAM,IAGlBC,EAA+B,IAAIF,MAAM/E,EAAuB,CAGpEgF,eAAgBA,KAAM,IAGxB9jB,KAAKK,SAAWujB,EAChB5jB,KAAK8e,sBAAwBiF,QAEvB9kB,QAAQ+N,IAAI,CAChBqW,EAAenP,mBACf4K,EAAsB5K,kBAAgBpW,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACnColB,GAAc,IACjB7L,eAAgBrX,KAAKqX,eACrB+B,oBAAqBpZ,KAAKoZ,oBAC1BC,YAAarZ,KAAKqZ,iBAGtBte,EAAI0f,MAAM,4BACZ,E,qCCxgBK,MAAMuJ,WAA4BnkB,GAAAA,EAqBvC6G,cAA8C,IAAlCjE,EAA2BjF,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACzC0F,MAAMT,IAAQuE,EAAAA,EAAAA,GAAA,YArBQid,GAAAA,GAAgBC,eAAYld,EAAAA,EAAAA,GAAA,wBAEFmd,GAAAA,GAAmB/jB,SAAM4G,EAAAA,EAAAA,GAAA,6BAEtB7G,GAAAA,GAAiBC,SAAM4G,EAAAA,EAAAA,GAAA,YAErCod,GAAAA,GAAiBC,WAAQrd,EAAAA,EAAAA,GAAA,cAE3B1G,GAAAA,GAAegkB,YAAStd,EAAAA,EAAAA,GAAA,qBAExB,OAAIA,EAAAA,EAAAA,GAAA,mCAAAA,EAAAA,EAAAA,GAAA,2BAAAA,EAAAA,EAAAA,GAAA,qBAME,CAAC,IAACA,EAAAA,EAAAA,GAAA,sBAEU,MAIrDhH,KAAKukB,mBAAqB9hB,EAAO+hB,iBAAmB,CAAC,EACrDxkB,KAAKykB,WAAahiB,EAAOgiB,YAAc,CAAC,EACxCzkB,KAAK0kB,cAAgBjiB,EAAOiiB,eAAiB,CAAC,CAChD,CAEIrkB,eACF,OAAIL,KAAK5C,SAAWkD,GAAAA,GAAegkB,WAAatkB,KAAK2kB,eAC5C3kB,KAAK2kB,eAEP,IACT,CAEItkB,aAASN,GACX,MAAM,IAAIR,MAAM,kBAClB,CAEA1D,aAA4D,IAAjDkC,EAA2BP,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,QAClC0F,MAAMlH,KAAK+B,GACjBmF,MAAM0hB,kCACN,MAAM,QAAEjkB,EAAO,cAAEkkB,EAAa,YAAEC,EAAW,UAAEC,EAAS,OAAEC,EAAM,WAAEC,GAAejlB,KAAKC,YAC9E+e,EAA4B,CAAEre,UAASokB,YAAWG,iBAAkBL,EAAeC,cAAaG,aAAYD,SAAQG,KAAM,IAEhInlB,KAAKolB,cAAgB,IAAI3G,GAAMze,KAAKukB,oBACpCxpB,GAAAA,GAAI0f,MAAM,gDACJza,KAAKolB,cAAcppB,MAAI8B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAEwc,iBAAiB,GAAUta,KAAKykB,YAAU,IAAEzF,aAE5Ehf,KAAK2kB,eAAiB,IAAIU,GAAAA,GAAsB,CAC9CC,OAAQ,CACNrlB,YAAaD,KAAKC,eAGtBD,KAAK5C,OAASkD,GAAAA,GAAeilB,MAC7BvlB,KAAKsD,KAAKC,GAAAA,GAAegiB,MAAOtB,GAAAA,GAAgBC,cAEhD,IACEnpB,GAAAA,GAAI0f,MAAM,qCACN1c,EAAQynB,cACVxlB,KAAKqD,YAAa,QACZrD,KAAKylB,U,CAEb,MAAOtpB,GACPpB,GAAAA,GAAIoB,MAAM,sDAAuDA,GACjE6D,KAAKsD,KAAKC,GAAAA,GAAemiB,QAASvpB,EACpC,CACF,CAEAN,gBAEE,GADAqH,MAAMyiB,+BACD3lB,KAAKolB,cAAe,MAAMQ,GAAAA,GAA0BC,SAAS,mCAClE,IAAK7lB,KAAK2kB,eAAgB,MAAMiB,GAAAA,GAA0BC,SAAS,mCACnE7lB,KAAK5C,OAASkD,GAAAA,GAAewlB,WAC7B9lB,KAAKsD,KAAKC,GAAAA,GAAeuiB,WAAY,CAAEC,QAAS9B,GAAAA,GAAgBC,eAChE,UACQlkB,KAAKolB,cAAc1B,MAAM1jB,KAAK0kB,eACpC,IACE,MAAMsB,EAAsBhmB,KAAKolB,cAAc/kB,SAC/C2lB,EAAoBC,gBAAkBjmB,KAAKolB,cAAca,gBAAgBxe,KAAKzH,KAAKolB,eAGnFY,EAAoBE,oBAAsBlmB,KAAKolB,cAAcc,oBAAoBze,KAAKzH,KAAKolB,eAC3FY,EAAoBG,YAAcnmB,KAAKolB,cAAce,YAAY1e,KAAKzH,KAAKolB,eAG3EY,EAAoBI,gBAAkBpmB,KAAKolB,cAAcgB,gBAAgB3e,KAAKzH,KAAKolB,qBAC7EplB,KAAK2kB,eAAe0B,cAAcL,E,CACxC,MAAO7pB,GAGP,KAAIA,aAAiBmqB,GAAAA,IAAgC,OAAfnqB,EAAM+N,MAK1C,MAAM/N,EALmD,CACzD,MAAM,QAAEwE,EAAO,cAAEkkB,EAAa,YAAEC,EAAW,UAAEC,EAAS,OAAEC,EAAM,WAAEC,GAAejlB,KAAKC,YAC9E+e,EAAU,CAAEre,UAASokB,YAAWG,iBAAkBL,EAAeC,cAAaG,aAAYD,SAAQG,KAAM,UACxGnlB,KAAKolB,cAAcmB,YAAYvH,EACvC,CAGF,CAIA,OAHAhf,KAAK5C,OAASkD,GAAAA,GAAeC,UAC7BP,KAAKolB,cAAc9K,kBACnBta,KAAKsD,KAAKhD,GAAAA,GAAeC,UAAW,CAAEwlB,QAAS9B,GAAAA,GAAgBC,aAAcsC,YAAaxmB,KAAKqD,aACxFrD,KAAKK,Q,CACZ,MAAOlE,GAKP,GAHA6D,KAAK5C,OAASkD,GAAAA,GAAeilB,MAC7BvlB,KAAKqD,YAAa,EAClBrD,KAAKsD,KAAKC,GAAAA,GAAemiB,QAASvpB,GAC9BA,aAAiBmqB,GAAAA,GAAe,MAAMnqB,EAC1C,MAAMqE,GAAAA,GAAiBimB,gBAAgB,2CACzC,CACF,CAEA5qB,mBAAoF,IAAnEkC,EAA6BP,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAG,IAAEkpB,SAAS,GAE1D,SADMxjB,MAAMyjB,qBACP3mB,KAAKolB,cAAe,MAAMQ,GAAAA,GAA0BC,SAAS,yCAC5D7lB,KAAKolB,cAAcxE,SACrB7iB,EAAQ2oB,SAEV1mB,KAAK5C,OAASkD,GAAAA,GAAegkB,UAC7BtkB,KAAKolB,cAAgB,KACrBplB,KAAK2kB,eAAiB,MAGtB3kB,KAAK5C,OAASkD,GAAAA,GAAeilB,YAEzBriB,MAAM0jB,YACd,CAEA/qB,oBACE,GAAImE,KAAK5C,SAAWkD,GAAAA,GAAeC,UAAW,MAAMC,GAAAA,GAAiBC,kBAAkB,6BACvF,IAAKT,KAAKolB,cAAe,MAAMQ,GAAAA,GAA0BC,SAAS,mCAElE,aADuB7lB,KAAKolB,cAAcyB,aAE5C,CAEA,eAAsB5mB,GAA6D,IAA7BjE,EAAIwB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GACxD0F,MAAM4jB,0BAA0B7mB,EAAajE,GAE7CgE,KAAK+mB,eAAe9mB,EACtB,CAEA,kBAAyBwC,GAA0D,IAAAukB,EAAA,IAA7BhrB,EAAIwB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GACxD0F,MAAM+jB,6BAA6BxkB,EAAQzG,GAC3C,MAAMiE,EAAcD,KAAKE,eAAeuC,EAAO9B,eACvB,QAAxBqmB,EAAMhnB,KAAKolB,qBAAL,IAAkB4B,OAAlB,EAAAA,EAAoBT,YAAY,CACpCxB,UAAW9kB,EAAY8kB,UACvBpkB,QAASV,EAAYU,QACrBmkB,YAAa7kB,EAAY6kB,YACzBI,iBAAkBjlB,EAAY4kB,cAC9BG,OAAQ/kB,EAAY+kB,OACpBC,WAAYhlB,EAAYglB,WACxBE,KAAM,uDAERnlB,KAAKknB,mBAAmB,CAAEjnB,YAAaD,KAAKE,eAAeuC,EAAO9B,UACpE,E,iIC3LF,MAAAwmB,EAAA9gB,EAAA,MAcA,MAAawU,UAA4Btb,MAMvCmH,YAAYwD,EAAcxH,EAAiBnE,GAEzC,IAAK4L,OAAOC,UAAUF,GACpB,MAAM,IAAI3K,MACR,8BAGJ,IAAKmD,GAA8B,kBAAZA,EACrB,MAAM,IAAInD,MACR,wCAIJ,MAAMmD,GACN,KAAKwH,KAAOA,OACCxM,IAATa,IACF,KAAKA,KAAOA,EAEhB,CAKAsjB,YACE,MAAMuF,EAAyC,CAC7Cld,KAAM,KAAKA,KACXxH,QAAS,KAAKA,SAQhB,YANkBhF,IAAd,KAAKa,OACP6oB,EAAW7oB,KAAO,KAAKA,MAErB,KAAK8L,QACP+c,EAAW/c,MAAQ,KAAKA,OAEnB+c,CACT,CAMAtlB,WACE,OAAOqlB,EAAAE,QACL,KAAKxF,YACLyF,EACA,EAEJ,EArDF5jB,EAAAA,iBAAAmX,EAoFA,SAASyM,EAAkBvnB,EAAYwnB,GACrC,GAAc,eAAVA,EAGJ,OAAOA,CACT,CA7BA7jB,EAAAA,sBAAA,cAA8CmX,EAM5CnU,YAAYwD,EAAcxH,EAAiBnE,GAEzC,IAYJ,SAAgC2L,GAC9B,OAAOC,OAAOC,UAAUF,IAASA,GAAQ,KAAQA,GAAQ,IAC3D,CAdSsd,CAAuBtd,GAC1B,MAAM,IAAI3K,MACR,6DAIJ,MAAM2K,EAAMxH,EAASnE,EACvB,E,+GClEWmF,EAAAA,WAAyB,CACpCmR,IAAK,CACH4S,cAAe,KACfC,kBAAmB,MACnBC,qBAAsB,MACtBC,qBAAsB,MACtBC,oBAAqB,MACrBC,eAAgB,MAChB1F,OAAQ,MACRtN,gBAAiB,MACjBiT,gBAAiB,MACjBC,eAAgB,MAChBC,UAAW,OAEb5nB,SAAU,CACR6nB,oBAAqB,KACrBC,aAAc,KACdC,kBAAmB,KACnB/Y,aAAc,KACdgZ,kBAAmB,OAIV3kB,EAAAA,YAAc,CACzB,SAAU,CACR4kB,SAAU,eACV5lB,QAAS,yGAEX,SAAU,CACR4lB,SAAU,eACV5lB,QAAS,gDAEX,SAAU,CACR4lB,SAAU,eACV5lB,QAAS,iDAEX,SAAU,CACR4lB,SAAU,eACV5lB,QAAS,gCAEX,SAAU,CACR4lB,SAAU,eACV5lB,QAAS,4BAEX,SAAU,CACR4lB,SAAU,WACV5lB,QAAS,kBAEX,SAAU,CACR4lB,SAAU,WACV5lB,QAAS,uBAEX,SAAU,CACR4lB,SAAU,WACV5lB,QAAS,yBAEX,SAAU,CACR4lB,SAAU,WACV5lB,QAAS,yBAEX,SAAU,CACR4lB,SAAU,WACV5lB,QAAS,yBAEX,SAAU,CACR4lB,SAAU,WACV5lB,QAAS,2BAEX,KAAQ,CACN4lB,SAAU,WACV5lB,QAAS,8BAEX,KAAQ,CACN4lB,SAAU,WACV5lB,QAAS,4EAEX,KAAQ,CACN4lB,SAAU,WACV5lB,QAAS,oEAEX,KAAQ,CACN4lB,SAAU,WACV5lB,QAAS,iDAEX,KAAQ,CACN4lB,SAAU,WACV5lB,QAAS,0D,kGC7Gb,MAAA6lB,EAAAliB,EAAA,MACAmiB,EAAAniB,EAAA,MACAoiB,EAAApiB,EAAA,MAuLA,SAASqiB,EAAsBxe,EAAcye,GAC3C,MAAOjmB,EAASnE,GAAQqqB,EAAUD,GAClC,OAAO,IAAIJ,EAAA1N,iBACT3Q,EACAxH,GAAW8lB,EAAAK,mBAAmB3e,GAC9B3L,EAEJ,CAEA,SAASuqB,EAAuB5e,EAAcye,GAC5C,MAAOjmB,EAASnE,GAAQqqB,EAAUD,GAClC,OAAO,IAAIJ,EAAAQ,sBACT7e,EACAxH,GAAW8lB,EAAAK,mBAAmB3e,GAC9B3L,EAEJ,CAEA,SAASqqB,EAAaD,GACpB,GAAIA,EAAK,CACP,GAAmB,kBAARA,EACT,MAAO,CAACA,GACH,GAAmB,kBAARA,IAAqBnjB,MAAMC,QAAQkjB,GAAM,CACzD,MAAM,QAAEjmB,EAAO,KAAEnE,GAASoqB,EAE1B,GAAIjmB,GAA8B,kBAAZA,EACpB,MAAM,IAAInD,MAAM,gCAElB,MAAO,CAACmD,QAAWhF,EAAWa,E,EAGlC,MAAO,EACT,CAxMamF,EAAAA,UAAY,CACvBmR,IAAK,CAKHuN,MAAWuG,GAA0BD,EACnCD,EAAAO,WAAWnU,IAAIuN,MAAOuG,GAMxB7T,eAAoB6T,GAA0BD,EAC5CD,EAAAO,WAAWnU,IAAIC,eAAgB6T,GAMjCX,cAAmBW,GAA0BD,EAC3CD,EAAAO,WAAWnU,IAAImT,cAAeW,GAMhCZ,eAAoBY,GAA0BD,EAC5CD,EAAAO,WAAWnU,IAAIkT,eAAgBY,GAMjCV,SAAcU,GAA0BD,EACtCD,EAAAO,WAAWnU,IAAIoT,SAAUU,GAQ3BM,OAAYlb,IACV,IAAKA,GAAwB,kBAATA,GAAqBvI,MAAMC,QAAQsI,GACrD,MAAM,IAAIxO,MAAM,mEAElB,MAAM,KAAE2K,GAAS6D,EACjB,IAAK5D,OAAOC,UAAUF,IAASA,GAAQ,OAASA,GAAQ,MACtD,MAAM,IAAI3K,MACR,iEAGJ,OAAOmpB,EAAmBxe,EAAM6D,EAAK,EAMvC0Z,aAAkBkB,GAA0BD,EAC1CD,EAAAO,WAAWnU,IAAI4S,aAAckB,GAM/BjB,iBAAsBiB,GAA0BD,EAC9CD,EAAAO,WAAWnU,IAAI6S,iBAAkBiB,GAMnChB,oBAAyBgB,GAA0BD,EACjDD,EAAAO,WAAWnU,IAAI8S,oBAAqBgB,GAMtCf,oBAAyBe,GAA0BD,EACjDD,EAAAO,WAAWnU,IAAI+S,oBAAqBe,GAMtCd,mBAAwBc,GAA0BD,EAChDD,EAAAO,WAAWnU,IAAIgT,mBAAoBc,GAMrCb,cAAmBa,GAA0BD,EAC3CD,EAAAO,WAAWnU,IAAIiT,cAAea,IAIlCtoB,SAAU,CAKR6nB,oBAAyBS,GAChBG,EACLL,EAAAO,WAAW3oB,SAAS6nB,oBAAqBS,GAO7CR,aAAkBQ,GACTG,EACLL,EAAAO,WAAW3oB,SAAS8nB,aAAcQ,GAOtCP,kBAAuBO,GACdG,EACLL,EAAAO,WAAW3oB,SAAS+nB,kBAAmBO,GAO3CtZ,aAAkBsZ,GACTG,EACLL,EAAAO,WAAW3oB,SAASgP,aAAcsZ,GAOtCN,kBAAuBM,GACdG,EACLL,EAAAO,WAAW3oB,SAASgoB,kBAAmBM,GAO3CO,OAAYnb,IACV,IAAKA,GAAwB,kBAATA,GAAqBvI,MAAMC,QAAQsI,GACrD,MAAM,IAAIxO,MAAM,wEAGlB,MAAM,KAAE2K,EAAI,QAAExH,EAAO,KAAEnE,GAASwP,EAEhC,IAAKrL,GAA8B,kBAAZA,EACrB,MAAM,IAAInD,MACR,uCAGJ,OAAO,IAAIgpB,EAAAQ,sBAAsB7e,EAAMxH,EAASnE,EAAK,G,+CClL3D,MAAAgqB,EAAAliB,EAAA,MAUE6E,OAAAA,eAAAA,EAAAA,KAAAA,CAAAie,YAAA,EAAA7rB,IAAA,kBAVOirB,EAAA1N,gBAAgB,IACzB,MAAA2N,EAAAniB,EAAA,MAGA,MAAA+iB,EAAA/iB,EAAA,MAKE6E,OAAAA,eAAAA,EAAAA,KAAAA,CAAAie,YAAA,EAAA7rB,IAAA,kBALO8rB,EAAAxU,SAAS,IAClB,MAAA6T,EAAApiB,EAAA,K,0KCLA,MAAAoiB,EAAApiB,EAAA,MACAkiB,EAAAliB,EAAA,MAEMgjB,EAAsBZ,EAAAO,WAAWnU,IAAIoT,SACrCqB,EAAmB,8DACnBC,EAA6C,CACjDrf,KAAMmf,EACN3mB,QAASmmB,EAAmBQ,IAW9B,SAAgBR,EACd3e,GAC0C,IAA1Csf,EAAAhsB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA0B8rB,EAE1B,GAAInf,OAAOC,UAAUF,GAAO,CAC1B,MAAMuf,EAAavf,EAAKpI,WAExB,GAAI4nB,EAAOjB,EAAAkB,YAAaF,GACtB,OAAOhB,EAAAkB,YAAYF,GAA6B/mB,QAElD,GAAIknB,EAAqB1f,GACvB,OAAOxG,EAAAmmB,6B,CAGX,OAAOL,CACT,CAMA,SAAgBM,EAAY5f,GAC1B,IAAKC,OAAOC,UAAUF,GACpB,OAAO,EAGT,MAAMuf,EAAavf,EAAKpI,WACxB,QAAI2mB,EAAAkB,YAAYF,MAIZG,EAAqB1f,EAI3B,CA8EA,SAAS0f,EAAqB1f,GAC5B,OAAOA,IAAS,OAASA,IAAS,IACpC,CAEA,SAAS6f,EAAoB5tB,GAC3B,OAAIA,GAA0B,kBAAVA,IAAuBqJ,MAAMC,QAAQtJ,GAChD+O,OAAOC,OAAO,GAAIhP,GAEpBA,CACT,CAEA,SAASutB,EAAOM,EAA8BC,GAC5C,OAAO/e,OAAO2M,UAAUC,eAAeC,KAAKiS,EAAKC,EACnD,CAtIavmB,EAAAA,8BAAgC,4BAQ7CA,EAAAA,mBAAAmlB,EAqBAnlB,EAAAA,YAAAomB,EAsBApmB,EAAAA,eAAA,SACEvH,GAIM,IAHN,cACE+tB,EAAgBX,EAAc,mBAC9BY,GAAqB,GACtB3sB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,G,QAGJ,IACG0sB,IACA/f,OAAOC,UAAU8f,EAAchgB,OACC,kBAA1BggB,EAAcxnB,QAErB,MAAM,IAAInD,MACR,4EAIJ,GAAIpD,aAAiBosB,EAAA1N,iBACnB,OAAO1e,EAAM0lB,YAGf,MAAMuF,EAAkD,GAExD,GACEjrB,GACiB,kBAAVA,IACNqJ,MAAMC,QAAQtJ,IACfutB,EAAOvtB,EAAkC,SACzC2tB,EAAa3tB,EAAqC+N,MAClD,CACA,MAAMmD,EAASlR,EACfirB,EAAWld,KAAOmD,EAAOnD,KAErBmD,EAAO3K,SAAqC,kBAAnB2K,EAAO3K,SAClC0kB,EAAW1kB,QAAU2K,EAAO3K,QAExBgnB,EAAOrc,EAAQ,UACjB+Z,EAAW7oB,KAAO8O,EAAO9O,QAG3B6oB,EAAW1kB,QAAUmmB,EAClBzB,EAA0Cld,MAG7Ckd,EAAW7oB,KAAO,CAAE6rB,cAAeL,EAAoB5tB,I,KAEpD,CACLirB,EAAWld,KAAOggB,EAAchgB,KAEhC,MAAMxH,EAAwB,QAAjB2nB,EAAIluB,SAAa,IAAAkuB,OAAA,EAAAA,EAAE3nB,QAEhC0kB,EAAW1kB,QACTA,GAA8B,kBAAZA,EACdA,EACAwnB,EAAcxnB,QAEpB0kB,EAAW7oB,KAAO,CAAE6rB,cAAeL,EAAoB5tB,G,CAGzD,MAAMkO,EAAsB,QAAjBigB,EAAInuB,SAAa,IAAAmuB,OAAA,EAAAA,EAAEjgB,MAK9B,OAHI8f,GAAsBhuB,GAASkO,GAA0B,kBAAVA,IACjD+c,EAAW/c,MAAQA,GAEd+c,CACT,C,wBCzHA3jB,EAAOC,QAAU,SAAS6mB,EAAMC,EAAGC,GACjC,GAAID,IAAMC,EAAG,OAAO,EAEpB,GAAID,GAAKC,GAAiB,iBAALD,GAA6B,iBAALC,EAAe,CAC1D,GAAID,EAAE9jB,cAAgB+jB,EAAE/jB,YAAa,OAAO,EAE5C,IAAIjJ,EAAQuG,EAAGwd,EACf,GAAIhc,MAAMC,QAAQ+kB,GAAI,CAEpB,IADA/sB,EAAS+sB,EAAE/sB,SACGgtB,EAAEhtB,OAAQ,OAAO,EAC/B,IAAKuG,EAAIvG,EAAgB,IAARuG,KACf,IAAKumB,EAAMC,EAAExmB,GAAIymB,EAAEzmB,IAAK,OAAO,EACjC,OAAO,CACT,CAIA,GAAIwmB,EAAE9jB,cAAgBgkB,OAAQ,OAAOF,EAAE9lB,SAAW+lB,EAAE/lB,QAAU8lB,EAAEG,QAAUF,EAAEE,MAC5E,GAAIH,EAAEI,UAAY1f,OAAO2M,UAAU+S,QAAS,OAAOJ,EAAEI,YAAcH,EAAEG,UACrE,GAAIJ,EAAE1oB,WAAaoJ,OAAO2M,UAAU/V,SAAU,OAAO0oB,EAAE1oB,aAAe2oB,EAAE3oB,WAIxE,IADArE,GADA+jB,EAAOtW,OAAOsW,KAAKgJ,IACL/sB,UACCyN,OAAOsW,KAAKiJ,GAAGhtB,OAAQ,OAAO,EAE7C,IAAKuG,EAAIvG,EAAgB,IAARuG,KACf,IAAKkH,OAAO2M,UAAUC,eAAeC,KAAK0S,EAAGjJ,EAAKxd,IAAK,OAAO,EAEhE,IAAKA,EAAIvG,EAAgB,IAARuG,KAAY,CAC3B,IAAIimB,EAAMzI,EAAKxd,GAEf,IAAKumB,EAAMC,EAAEP,GAAMQ,EAAER,IAAO,OAAO,CACrC,CAEA,OAAO,CACT,CAGA,OAAOO,IAAIA,GAAKC,IAAIA,CACtB,C","sources":["../node_modules/@toruslabs/http-helpers/src/index.ts","../node_modules/@web3auth/base-solana-adapter/src/baseSolanaAdapter.ts","../node_modules/@web3auth/base-solana-adapter/node_modules/base-x/src/index.js","../node_modules/@web3auth/base-solana-adapter/node_modules/bs58/index.js","../node_modules/@toruslabs/solana-embed/node_modules/@toruslabs/openlogin-jrpc/src/basePostMessageStream.ts","../node_modules/@toruslabs/solana-embed/node_modules/@toruslabs/openlogin-jrpc/src/safeEventEmitter.ts","../node_modules/@toruslabs/solana-embed/node_modules/@toruslabs/openlogin-jrpc/src/serializableError.ts","../node_modules/@toruslabs/solana-embed/node_modules/@toruslabs/openlogin-jrpc/src/jrpc.ts","../node_modules/@toruslabs/solana-embed/node_modules/@toruslabs/openlogin-jrpc/src/jrpcEngine.ts","../node_modules/@toruslabs/solana-embed/node_modules/@toruslabs/openlogin-jrpc/src/substream.ts","../node_modules/@toruslabs/solana-embed/node_modules/@toruslabs/openlogin-jrpc/src/mux.ts","../node_modules/@toruslabs/solana-embed/src/isStream.ts","../node_modules/@toruslabs/solana-embed/src/messages.ts","../node_modules/@toruslabs/solana-embed/src/interfaces.ts","../node_modules/@toruslabs/solana-embed/src/config.ts","../node_modules/@toruslabs/solana-embed/src/loglevel.ts","../node_modules/@toruslabs/solana-embed/src/utils.ts","../node_modules/@toruslabs/solana-embed/src/baseProvider.ts","../node_modules/@toruslabs/solana-embed/src/embedUtils.ts","../node_modules/@toruslabs/solana-embed/src/PopupHandler.ts","../node_modules/@toruslabs/solana-embed/src/communicationProvider.ts","../node_modules/@toruslabs/solana-embed/src/inPageProvider.ts","../node_modules/@toruslabs/solana-embed/src/siteMetadata.ts","../node_modules/@toruslabs/solana-embed/src/embed.ts","../node_modules/@web3auth/torus-solana-adapter/src/solanaWalletAdapter.ts","../../src/classes.ts","../../src/error-constants.ts","../../src/errors.ts","../../src/index.ts","../../src/utils.ts","../node_modules/fast-deep-equal/index.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-throw-literal */\nimport type { SpanContext, TransactionContext } from \"@sentry/types\";\nimport merge from \"lodash.merge\";\nimport logLevel, { levels, LogLevelDesc } from \"loglevel\";\n\nconst log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\n\nexport interface CustomOptions {\n  [key: string]: unknown;\n  useAPIKey?: boolean;\n  isUrlEncodedData?: boolean;\n  timeout?: number;\n  logTracingHeader?: boolean;\n}\n\nexport interface Data {}\n\nlet apiKey = \"torus-default\";\nlet embedHost = \"\";\n\n// #region API Keys\nexport const gatewayAuthHeader = \"x-api-key\";\nexport const gatewayEmbedHostHeader = \"x-embed-host\";\n\ninterface Sentry {\n  startTransaction(_: TransactionContext): {\n    startChild(a: SpanContext): {\n      finish(): void;\n    };\n    finish(): void;\n  };\n}\n\nlet sentry: Sentry | null = null;\nconst tracingOrigins: string[] = [];\nconst tracingPaths: string[] = [];\n\nexport function enableSentryTracing(_sentry: Sentry, _tracingOrigins: string[], _tracingPaths: string[]) {\n  sentry = _sentry;\n  tracingOrigins.push(..._tracingOrigins);\n  tracingPaths.push(..._tracingPaths);\n}\n\nexport function setEmbedHost(embedHost_: string): void {\n  embedHost = embedHost_;\n}\n\nexport function clearEmbedHost(): void {\n  embedHost = \"\";\n}\n\nexport function getEmbedHost(): string {\n  return embedHost;\n}\n\nexport function setAPIKey(apiKey_: string): void {\n  apiKey = apiKey_;\n}\n\nexport function clearAPIKey(): void {\n  apiKey = \"torus-default\";\n}\n\nexport function getAPIKey(): string {\n  return apiKey;\n}\n\n// #endregion\n\nexport function setLogLevel(level: LogLevelDesc) {\n  log.setLevel(level);\n}\n\nasync function fetchAndTrace(url: string, init: RequestInit): Promise<Response> {\n  let _url: URL | null = null;\n  try {\n    _url = new URL(url);\n  } catch (error) {}\n  if (sentry && _url && (tracingOrigins.includes(_url.origin) || tracingPaths.includes(_url.pathname))) {\n    const transaction = sentry.startTransaction({\n      name: url,\n    });\n    const span = transaction.startChild({\n      op: \"http\",\n    }); // This function returns a Span\n\n    const response = await fetch(url, init);\n    span.finish(); // Remember that only finished spans will be sent with the transaction\n\n    transaction.finish(); // Finishing the transaction will send it to Sentry\n\n    return response;\n  }\n\n  return fetch(url, init);\n}\nfunction getApiKeyHeaders(): Record<string, string> {\n  const headers: Record<string, string> = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\n\nfunction debugLogResponse(response: Response) {\n  log.info(`Response: ${response.status} ${response.statusText}`);\n  log.info(`Url: ${response.url}`);\n}\n\nfunction logTracingHeader(response: Response) {\n  log.info(`Request tracing with traceID=${response.headers.get(\"x-web3-correlation-id\")}`);\n}\n\nexport const promiseTimeout = <T>(ms: number, promise: Promise<T>): Promise<T> => {\n  const timeout = new Promise<T>((_resolve, reject) => {\n    const id = setTimeout(() => {\n      clearTimeout(id);\n      reject(new Error(`Timed out in ${ms}ms`));\n    }, ms);\n  });\n  return Promise.race<T>([promise, timeout]);\n};\n\nexport const get = async <T>(url: string, options_: RequestInit = {}, customOptions: CustomOptions = {}) => {\n  const defaultOptions = {\n    mode: \"cors\" as RequestMode,\n    headers: {},\n  };\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = { ...defaultOptions.headers, ...getApiKeyHeaders() };\n  }\n  const options = merge(defaultOptions, options_, { method: \"GET\" });\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    const responseContentType = response.headers.get(\"content-type\");\n    if (responseContentType?.includes(\"application/json\")) {\n      return response.json() as Promise<T>;\n    }\n    return response.text() as Promise<T>;\n  }\n  debugLogResponse(response);\n  throw response;\n};\n\nexport const post = <T>(url: string, data: Data = {}, options_: RequestInit = {}, customOptions: CustomOptions = {}) => {\n  const defaultOptions = {\n    mode: \"cors\" as RequestMode,\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\",\n    },\n  };\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = { ...defaultOptions.headers, ...getApiKeyHeaders() };\n  }\n  const options = merge(defaultOptions, options_, { method: \"POST\" });\n\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data as string;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  return promiseTimeout<T>(\n    (customOptions.timeout as number) || 60000,\n    fetchAndTrace(url, options).then((response) => {\n      if (customOptions.logTracingHeader) {\n        logTracingHeader(response);\n      }\n      if (response.ok) {\n        const responseContentType = response.headers.get(\"content-type\");\n        if (responseContentType?.includes(\"application/json\")) {\n          return response.json() as Promise<T>;\n        }\n        return response.text() as Promise<T>;\n      }\n      debugLogResponse(response);\n      throw response;\n    })\n  );\n};\n\nexport const patch = async <T>(url: string, data: Data = {}, options_: RequestInit = {}, customOptions: CustomOptions = {}) => {\n  const defaultOptions = {\n    mode: \"cors\" as RequestMode,\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\",\n    },\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = { ...defaultOptions.headers, ...getApiKeyHeaders() };\n  }\n  const options = merge(defaultOptions, options_, { method: \"PATCH\" });\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data as string;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    const responseContentType = response.headers.get(\"content-type\");\n    if (responseContentType?.includes(\"application/json\")) {\n      return response.json() as Promise<T>;\n    }\n    return response.text() as Promise<T>;\n  }\n  debugLogResponse(response);\n  throw response;\n};\n\nexport const put = async <T>(url: string, data: Data = {}, options_: RequestInit = {}, customOptions: CustomOptions = {}) => {\n  const defaultOptions = {\n    mode: \"cors\" as RequestMode,\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\",\n    },\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = { ...defaultOptions.headers, ...getApiKeyHeaders() };\n  }\n  const options = merge(defaultOptions, options_, { method: \"PUT\" });\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data as string;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    const responseContentType = response.headers.get(\"content-type\");\n    if (responseContentType?.includes(\"application/json\")) {\n      return response.json() as Promise<T>;\n    }\n    return response.text() as Promise<T>;\n  }\n  debugLogResponse(response);\n  throw response;\n};\n\nexport const remove = async <T>(url: string, data: Data = {}, options_: RequestInit = {}, customOptions: CustomOptions = {}) => {\n  const defaultOptions = {\n    mode: \"cors\" as RequestMode,\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\",\n    },\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = { ...defaultOptions.headers, ...getApiKeyHeaders() };\n  }\n  const options = merge(defaultOptions, options_, { method: \"DELETE\" });\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data as string;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    const responseContentType = response.headers.get(\"content-type\");\n    if (responseContentType?.includes(\"application/json\")) {\n      return response.json() as Promise<T>;\n    }\n    return response.text() as Promise<T>;\n  }\n  debugLogResponse(response);\n  throw response;\n};\n\nexport const generateJsonRPCObject = (method: string, parameters: unknown) => ({\n  jsonrpc: \"2.0\",\n  method,\n  id: 10,\n  params: parameters,\n});\n\nexport const promiseRace = <T>(url: string, options: RequestInit, timeout = 60000) =>\n  Promise.race([\n    get<T>(url, options),\n    new Promise<T>((_resolve, reject) => {\n      setTimeout(() => {\n        reject(new Error(\"timed out\"));\n      }, timeout);\n    }),\n  ]);\n","import {\n  ADAPTER_EVENTS,\n  ADAPTER_STATUS,\n  AdapterInitOptions,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  checkIfTokenIsExpired,\n  clearToken,\n  getChainConfig,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport bs58 from \"bs58\";\n\nexport abstract class BaseSolanaAdapter<T> extends BaseAdapter<T> {\n  async init(_?: AdapterInitOptions): Promise<void> {\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, 1);\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError();\n\n    const { chainNamespace, chainId } = this.chainConfig;\n\n    const accounts = await this.provider.request<never, string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n      const encodedMessage = new TextEncoder().encode(challenge);\n      const signedMessage = await this.provider.request<{ message: Uint8Array; display: string }, Uint8Array>({\n        method: \"signMessage\",\n        params: {\n          message: encodedMessage,\n          display: \"utf8\",\n        },\n      });\n      const idToken = await verifySignedChallenge(\n        chainNamespace,\n        bs58.encode(signedMessage as Uint8Array),\n        challenge,\n        this.name,\n        this.sessionTime,\n        this.clientId,\n        this.web3AuthNetwork\n      );\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnectSession(): Promise<void> {\n    super.checkDisconnectionRequirements();\n    const accounts = await this.provider.request<never, string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","const basex = require('base-x')\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","import { Duplex } from \"readable-stream\";\n\nfunction noop(): void {\n  return undefined;\n}\n\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\n\nexport default class BasePostMessageStream extends Duplex {\n  _init: boolean;\n\n  _haveSyn: boolean;\n\n  _name: string;\n\n  _target: string;\n\n  _targetWindow: Window;\n\n  _targetOrigin: string;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  _onMessage: any;\n\n  _synIntervalId: number;\n\n  constructor({\n    name,\n    target,\n    targetWindow = window,\n    targetOrigin = \"*\",\n  }: {\n    name: string;\n    target: string;\n    targetWindow?: Window;\n    targetOrigin?: string;\n  }) {\n    super({\n      objectMode: true,\n    });\n    if (!name || !target) {\n      throw new Error(\"Invalid input.\");\n    }\n    this._init = false;\n    this._haveSyn = false;\n    this._name = name;\n    this._target = target; // target origin\n    this._targetWindow = targetWindow;\n    this._targetOrigin = targetOrigin;\n    this._onMessage = this.onMessage.bind(this);\n    this._synIntervalId = null;\n\n    window.addEventListener(\"message\", this._onMessage, false);\n    this._handShake();\n  }\n\n  _break(): void {\n    this.cork();\n    this._write(BRK, null, noop);\n    this._haveSyn = false;\n    this._init = false;\n  }\n\n  _handShake(): void {\n    this._write(SYN, null, noop);\n    this.cork();\n  }\n\n  _onData(data: unknown): void {\n    if (!this._init) {\n      // listen for handshake\n      if (data === SYN) {\n        this._haveSyn = true;\n        this._write(ACK, null, noop);\n      } else if (data === ACK) {\n        this._init = true;\n        if (!this._haveSyn) {\n          this._write(ACK, null, noop);\n        }\n        this.uncork();\n      }\n    } else if (data === BRK) {\n      this._break();\n    } else {\n      // forward message\n      try {\n        this.push(data);\n      } catch (err) {\n        this.emit(\"error\", err);\n      }\n    }\n  }\n\n  _postMessage(data: unknown): void {\n    const originConstraint = this._targetOrigin;\n    this._targetWindow.postMessage(\n      {\n        target: this._target,\n        data,\n      },\n      originConstraint\n    );\n  }\n\n  onMessage(event: MessageEvent): void {\n    const message = event.data;\n\n    // validate message\n    if (\n      (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin) ||\n      event.source !== this._targetWindow ||\n      typeof message !== \"object\" ||\n      message.target !== this._name ||\n      !message.data\n    ) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  _read(): void {\n    return undefined;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  _write(data: unknown, _: any, cb: () => void): void {\n    this._postMessage(data);\n    cb();\n  }\n\n  _destroy(): void {\n    window.removeEventListener(\"message\", this._onMessage, false);\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { EventEmitter } from \"events\";\n\ntype Handler = (...args: any[]) => void;\ninterface EventMap {\n  [k: string]: Handler | Handler[] | undefined;\n}\n\nfunction safeApply<T, A extends any[]>(handler: (this: T, ...handlerArgs: A) => void, context: T, args: A): void {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(() => {\n      throw err;\n    });\n  }\n}\n\nfunction arrayClone<T>(arr: T[]): T[] {\n  const n = arr.length;\n  const copy = new Array(n);\n  for (let i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n  return copy;\n}\n\nexport default class SafeEventEmitter extends EventEmitter {\n  emit(type: string, ...args: any[]): boolean {\n    let doError = type === \"error\";\n\n    const events: EventMap = (this as any)._events;\n    if (events !== undefined) {\n      doError = doError && events.error === undefined;\n    } else if (!doError) {\n      return false;\n    }\n\n    // If there is no 'error' event listener then throw.\n    if (doError) {\n      let er;\n      if (args.length > 0) {\n        [er] = args;\n      }\n      if (er instanceof Error) {\n        // Note: The comments on the `throw` lines are intentional, they show\n        // up in Node's output if this results in an unhandled exception.\n        throw er; // Unhandled 'error' event\n      }\n      // At least give some kind of context to the user\n      const err = new Error(`Unhandled error.${er ? ` (${er.message})` : \"\"}`);\n      (err as any).context = er;\n      throw err; // Unhandled 'error' event\n    }\n\n    const handler = events[type];\n\n    if (handler === undefined) {\n      return false;\n    }\n\n    if (typeof handler === \"function\") {\n      safeApply(handler, this, args);\n    } else {\n      const len = handler.length;\n      const listeners = arrayClone(handler);\n      for (let i = 0; i < len; i += 1) {\n        safeApply(listeners[i], this, args);\n      }\n    }\n\n    return true;\n  }\n}\n","import stringify from \"fast-safe-stringify\";\n\nexport default class SerializableError<T> extends Error {\n  public code: number;\n\n  public data: T;\n\n  constructor({ code, message, data }: { code: number; message: string; data?: T }) {\n    if (!Number.isInteger(code)) {\n      throw new Error(\"code must be an integer\");\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error(\"message must be string\");\n    }\n\n    super(message);\n    this.code = code;\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n\n  toString(): string {\n    return stringify({\n      code: this.code,\n      message: this.message,\n      data: this.data,\n      stack: this.stack,\n    });\n  }\n}\n","import { Duplex } from \"readable-stream\";\n\nimport { AsyncJRPCMiddleware, ConsoleLike, IdMap, JRPCMiddleware, JRPCRequest, JRPCResponse, Json, ReturnHandlerCallback } from \"./interfaces\";\nimport SafeEventEmitter from \"./safeEventEmitter\";\nimport SerializableError from \"./serializableError\";\n\nexport const getRpcPromiseCallback =\n  (resolve: (value?: unknown) => void, reject: (error?: Error) => void, unwrapResult = true) =>\n  (error: Error, response: JRPCResponse<unknown>): void => {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else if (!unwrapResult || Array.isArray(response)) {\n      resolve(response);\n    } else {\n      resolve(response.result);\n    }\n  };\n\nexport function createErrorMiddleware(log: ConsoleLike): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next, end) => {\n    try {\n      // json-rpc-engine will terminate the request when it notices this error\n      if (typeof req.method !== \"string\" || !req.method) {\n        res.error = new SerializableError({ code: -32603, message: \"invalid method\" });\n        end();\n        return;\n      }\n      next((done) => {\n        const { error } = res;\n        if (!error) {\n          return done();\n        }\n        log.error(`OpenLogin - RPC Error: ${error.message}`, error);\n        return done();\n      });\n    } catch (error: unknown) {\n      log.error(`OpenLogin - RPC Error thrown: ${(error as Error).message}`, error);\n      res.error = new SerializableError({ code: -32603, message: (error as Error).message });\n      end();\n    }\n  };\n}\n\nexport function createStreamMiddleware(): { events: SafeEventEmitter; middleware: JRPCMiddleware<unknown, unknown>; stream: Duplex } {\n  const idMap: IdMap = {};\n\n  function readNoop() {\n    return false;\n  }\n\n  const events = new SafeEventEmitter();\n\n  function processResponse(res: JRPCResponse<unknown>) {\n    const context = idMap[res.id as unknown as string];\n    if (!context) {\n      throw new Error(`StreamMiddleware - Unknown response id \"${res.id}\"`);\n    }\n\n    delete idMap[res.id as unknown as string];\n    // copy whole res onto original res\n    Object.assign(context.res, res);\n    // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n    setTimeout(context.end);\n  }\n\n  function processNotification(res: JRPCRequest<unknown>) {\n    events.emit(\"notification\", res);\n  }\n\n  function processMessage(res: JRPCResponse<unknown>, _encoding: unknown, cb: (error?: Error | null) => void) {\n    let err: Error;\n    try {\n      const isNotification = !res.id;\n      if (isNotification) {\n        processNotification(res as unknown as JRPCRequest<unknown>);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err: unknown) {\n      err = _err as Error;\n    }\n    // continue processing stream\n    cb(err);\n  }\n\n  const stream = new Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage,\n  });\n\n  const middleware: JRPCMiddleware<unknown, unknown> = (req, res, next, end) => {\n    // write req to stream\n    stream.push(req);\n    // register request on id map\n    idMap[req.id as unknown as string] = { req, res, next, end };\n  };\n\n  return { events, middleware, stream };\n}\n\nexport type ScaffoldMiddlewareHandler<T, U> = JRPCMiddleware<T, U> | Json;\n\nexport function createScaffoldMiddleware(handlers: {\n  [methodName: string]: ScaffoldMiddlewareHandler<unknown, unknown>;\n}): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next, end) => {\n    const handler = handlers[req.method];\n    // if no handler, return\n    if (handler === undefined) {\n      return next();\n    }\n    // if handler is fn, call as middleware\n    if (typeof handler === \"function\") {\n      return handler(req, res, next, end);\n    }\n    // if handler is some other value, use as result\n    res.result = handler;\n    return end();\n  };\n}\n\nexport function createIdRemapMiddleware(): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next, _end) => {\n    const originalId = req.id;\n    const newId = Math.random().toString(36).slice(2);\n    req.id = newId;\n    res.id = newId;\n    next((done) => {\n      req.id = originalId;\n      res.id = originalId;\n      done();\n    });\n  };\n}\n\nexport function createLoggerMiddleware(logger: ConsoleLike): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next, _) => {\n    logger.debug(\"REQ\", req, \"RES\", res);\n    next();\n  };\n}\n\nexport function createAsyncMiddleware<T, U>(asyncMiddleware: AsyncJRPCMiddleware<T, U>): JRPCMiddleware<T, U> {\n  return async (req, res, next, end) => {\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise: () => void;\n    const nextPromise = new Promise<void>((resolve) => {\n      resolveNextPromise = resolve;\n    });\n\n    let returnHandlerCallback: unknown = null;\n    let nextWasCalled = false;\n\n    // This will be called by the consumer's async middleware.\n    const asyncNext = async () => {\n      nextWasCalled = true;\n\n      // We pass a return handler to next(). When it is called by the engine,\n      // the consumer's async middleware will resume executing.\n\n      next((runReturnHandlersCallback) => {\n        // This callback comes from JRPCEngine._runReturnHandlers\n        returnHandlerCallback = runReturnHandlersCallback;\n        resolveNextPromise();\n      });\n      await nextPromise;\n    };\n\n    try {\n      await asyncMiddleware(req, res, asyncNext);\n\n      if (nextWasCalled) {\n        await nextPromise; // we must wait until the return handler is called\n        (returnHandlerCallback as ReturnHandlerCallback)(null);\n      } else {\n        end(null);\n      }\n    } catch (err: unknown) {\n      const error = err as Error;\n      if (returnHandlerCallback) {\n        (returnHandlerCallback as ReturnHandlerCallback)(error);\n      } else {\n        end(error);\n      }\n    }\n  };\n}\n","import { rpcErrors, serializeError } from \"@metamask/rpc-errors\";\nimport { Duplex } from \"readable-stream\";\n\nimport {\n  JRPCEngineEndCallback,\n  JRPCEngineNextCallback,\n  JRPCEngineReturnHandler,\n  JRPCMiddleware,\n  JRPCRequest,\n  JRPCResponse,\n  Maybe,\n  RequestArguments,\n  SendCallBack,\n} from \"./interfaces\";\nimport SafeEventEmitter from \"./safeEventEmitter\";\nimport SerializableError from \"./serializableError\";\n\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\nexport class JRPCEngine extends SafeEventEmitter {\n  private _middleware: JRPCMiddleware<unknown, unknown>[];\n\n  constructor() {\n    super();\n    this._middleware = [];\n  }\n\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n  private static async _runAllMiddleware(\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<unknown>,\n    middlewareStack: JRPCMiddleware<unknown, unknown>[]\n  ): Promise<\n    [\n      unknown, // error\n      boolean, // isComplete\n      JRPCEngineReturnHandler[],\n    ]\n  > {\n    const returnHandlers: JRPCEngineReturnHandler[] = [];\n    let error = null;\n    let isComplete = false;\n\n    // Go down stack of middleware, call and collect optional returnHandlers\n    for (const middleware of middlewareStack) {\n      [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n      if (isComplete) {\n        break;\n      }\n    }\n    return [error, isComplete, returnHandlers.reverse()];\n  }\n\n  /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */\n  private static _runMiddleware(\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<unknown>,\n    middleware: JRPCMiddleware<unknown, unknown>,\n    returnHandlers: JRPCEngineReturnHandler[]\n  ): Promise<[unknown, boolean]> {\n    return new Promise((resolve) => {\n      const end: JRPCEngineEndCallback = (err?: unknown) => {\n        const error = err || res.error;\n        if (error) {\n          res.error = serializeError(error);\n        }\n        // True indicates that the request should end\n        resolve([error, true]);\n      };\n\n      const next: JRPCEngineNextCallback = (returnHandler?: JRPCEngineReturnHandler) => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== \"function\") {\n              end(new SerializableError({ code: -32603, message: \"JRPCEngine: 'next' return handlers must be functions\" }));\n            }\n            returnHandlers.push(returnHandler);\n          }\n\n          // False indicates that the request should not end\n          resolve([null, false]);\n        }\n      };\n\n      try {\n        middleware(req, res, next, end);\n      } catch (error: unknown) {\n        end(error as Error);\n      }\n    });\n  }\n\n  /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */\n  private static async _runReturnHandlers(handlers: JRPCEngineReturnHandler[]): Promise<void> {\n    for (const handler of handlers) {\n      await new Promise<void>((resolve, reject) => {\n        handler((err) => (err ? reject(err) : resolve()));\n      });\n    }\n  }\n\n  /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */\n  private static _checkForCompletion(_req: JRPCRequest<unknown>, res: JRPCResponse<unknown>, isComplete: boolean): void {\n    if (!(\"result\" in res) && !(\"error\" in res)) {\n      throw new SerializableError({ code: -32603, message: \"Response has no error or result for request\" });\n    }\n    if (!isComplete) {\n      throw new SerializableError({ code: -32603, message: \"Nothing ended request\" });\n    }\n  }\n\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n  push<T, U>(middleware: JRPCMiddleware<T, U>): void {\n    this._middleware.push(middleware as JRPCMiddleware<unknown, unknown>);\n  }\n\n  /**\n   * Handle a JSON-RPC request, and return a response.\n   *\n   * @param request - The request to handle.\n   * @param callback - An error-first callback that will receive the response.\n   */\n  handle<T, U>(request: JRPCRequest<T>, callback: (error: unknown, response: JRPCResponse<U>) => void): void;\n\n  /**\n   * Handle an array of JSON-RPC requests, and return an array of responses.\n   *\n   * @param request - The requests to handle.\n   * @param callback - An error-first callback that will receive the array of\n   * responses.\n   */\n  handle<T, U>(requests: JRPCRequest<T>[], callback: (error: unknown, responses: JRPCResponse<U>[]) => void): void;\n\n  /**\n   * Handle a JSON-RPC request, and return a response.\n   *\n   * @param request - The request to handle.\n   * @returns A promise that resolves with the response, or rejects with an\n   * error.\n   */\n  handle<T, U>(request: JRPCRequest<T>): Promise<JRPCResponse<U>>;\n\n  /**\n   * Handle an array of JSON-RPC requests, and return an array of responses.\n   *\n   * @param request - The requests to handle.\n   * @returns A promise that resolves with the array of responses, or rejects\n   * with an error.\n   */\n  handle<T, U>(requests: JRPCRequest<T>[]): Promise<JRPCResponse<U>[]>;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  handle(req: unknown, cb?: any) {\n    if (cb && typeof cb !== \"function\") {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n      return this._handleBatch(req);\n    }\n\n    if (cb) {\n      return this._handle(req as JRPCRequest<unknown>, cb);\n    }\n    return this._promiseHandle(req as JRPCRequest<unknown>);\n  }\n\n  /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */\n  asMiddleware(): JRPCMiddleware<unknown, unknown> {\n    return async (req, res, next, end) => {\n      try {\n        const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n        if (isComplete) {\n          await JRPCEngine._runReturnHandlers(returnHandlers);\n          return end(middlewareError as Error);\n        }\n\n        return next(async (handlerCallback) => {\n          try {\n            await JRPCEngine._runReturnHandlers(returnHandlers);\n          } catch (error: unknown) {\n            return handlerCallback(error as Error);\n          }\n          return handlerCallback();\n        });\n      } catch (error: unknown) {\n        return end(error as Error);\n      }\n    };\n  }\n\n  /**\n   * Like _handle, but for batch requests.\n   */\n  private _handleBatch(reqs: JRPCRequest<unknown>[]): Promise<JRPCResponse<unknown>[]>;\n\n  /**\n   * Like _handle, but for batch requests.\n   */\n  private _handleBatch(reqs: JRPCRequest<unknown>[], cb: (error: unknown, responses?: JRPCResponse<unknown>[]) => void): Promise<void>;\n\n  private async _handleBatch(\n    reqs: JRPCRequest<unknown>[],\n    cb?: (error: unknown, responses?: JRPCResponse<unknown>[]) => void\n  ): Promise<JRPCResponse<unknown>[] | void> {\n    // The order here is important\n    try {\n      // 2. Wait for all requests to finish, or throw on some kind of fatal\n      // error\n      const responses = await Promise.all(\n        // 1. Begin executing each request in the order received\n        reqs.map(this._promiseHandle.bind(this))\n      );\n\n      // 3. Return batch response\n      if (cb) {\n        return cb(null, responses);\n      }\n      return responses;\n    } catch (error) {\n      if (cb) {\n        return cb(error);\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * A promise-wrapped _handle.\n   */\n  private _promiseHandle(req: JRPCRequest<unknown>): Promise<JRPCResponse<unknown>> {\n    return new Promise((resolve) => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        resolve(res);\n      });\n    });\n  }\n\n  /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */\n  private async _handle(callerReq: JRPCRequest<unknown>, cb: (error: unknown, response: JRPCResponse<unknown>) => void): Promise<void> {\n    if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n      const error = new SerializableError({ code: -32603, message: \"request must be plain object\" });\n      return cb(error, { id: undefined, jsonrpc: \"2.0\", error });\n    }\n\n    if (typeof callerReq.method !== \"string\") {\n      const error = new SerializableError({ code: -32603, message: \"method must be string\" });\n      return cb(error, { id: callerReq.id, jsonrpc: \"2.0\", error });\n    }\n\n    const req: JRPCRequest<unknown> = { ...callerReq };\n    const res: JRPCResponse<unknown> = {\n      id: req.id,\n      jsonrpc: req.jsonrpc,\n    };\n    let error: Error = null;\n\n    try {\n      await this._processRequest(req, res);\n    } catch (_error: unknown) {\n      // A request handler error, a re-thrown middleware error, or something\n      // unexpected.\n      error = _error as Error;\n    }\n\n    if (error) {\n      // Ensure no result is present on an errored response\n      delete res.result;\n      if (!res.error) {\n        res.error = serializeError(error);\n      }\n    }\n\n    return cb(error, res as JRPCResponse<unknown>);\n  }\n\n  /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */\n  private async _processRequest(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n    // Throw if \"end\" was not called, or if the response has neither a result\n    // nor an error.\n    JRPCEngine._checkForCompletion(req, res, isComplete);\n\n    // The return handlers should run even if an error was encountered during\n    // middleware processing.\n    await JRPCEngine._runReturnHandlers(returnHandlers);\n\n    // Now we re-throw the middleware processing error, if any, to catch it\n    // further up the call chain.\n    if (error) {\n      throw error;\n    }\n  }\n}\n\nexport function mergeMiddleware(middlewareStack: JRPCMiddleware<unknown, unknown>[]): JRPCMiddleware<unknown, unknown> {\n  const engine = new JRPCEngine();\n  middlewareStack.forEach((middleware) => engine.push(middleware));\n  return engine.asMiddleware();\n}\n\nexport interface EngineStreamOptions {\n  engine: JRPCEngine;\n}\n\nexport function createEngineStream(opts: EngineStreamOptions): Duplex {\n  if (!opts || !opts.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n\n  const { engine } = opts;\n  // eslint-disable-next-line prefer-const\n  let stream: Duplex;\n\n  function read(): undefined {\n    return undefined;\n  }\n\n  function write(req: JRPCRequest<unknown>, _encoding: unknown, cb: (error?: Error | null) => void) {\n    engine.handle(req, (_err, res) => {\n      stream.push(res);\n    });\n    cb();\n  }\n\n  stream = new Duplex({ objectMode: true, read, write });\n\n  // forward notifications\n  if (engine.on) {\n    engine.on(\"notification\", (message) => {\n      stream.push(message);\n    });\n  }\n  return stream;\n}\n\nexport interface SafeEventEmitterProvider extends SafeEventEmitter {\n  sendAsync: <T, U>(req: JRPCRequest<T>) => Promise<U>;\n  send: <T, U>(req: JRPCRequest<T>, callback: SendCallBack<JRPCResponse<U>>) => void;\n  request: <T, U>(args: RequestArguments<T>) => Promise<Maybe<U>>;\n}\n\nexport function providerFromEngine(engine: JRPCEngine): SafeEventEmitterProvider {\n  const provider: SafeEventEmitterProvider = new SafeEventEmitter() as SafeEventEmitterProvider;\n  // handle both rpc send methods\n  provider.sendAsync = async <T, U>(req: JRPCRequest<T>) => {\n    const res = await engine.handle(req);\n    if (res.error) {\n      const err = serializeError(res.error, {\n        fallbackError: {\n          message: res.error?.message || res.error.toString(),\n          code: res.error?.code || -32603,\n        },\n      });\n\n      throw rpcErrors.internal(err);\n    }\n    return res.result as U;\n  };\n\n  provider.send = <T, U>(req: JRPCRequest<T>, callback: (error: unknown, providerRes: JRPCResponse<U>) => void) => {\n    if (typeof callback !== \"function\") {\n      throw new Error('Must provide callback to \"send\" method.');\n    }\n    engine.handle(req, callback);\n  };\n  // forward notifications\n  if (engine.on) {\n    engine.on(\"notification\", (message: string) => {\n      provider.emit(\"data\", null, message);\n    });\n  }\n\n  provider.request = async <T, U>(args: RequestArguments<T>) => {\n    const req: JRPCRequest<T> = {\n      ...args,\n      id: Math.random().toString(36).slice(2),\n      jsonrpc: \"2.0\",\n    };\n    const res = await provider.sendAsync(req);\n    return res as U;\n  };\n  return provider;\n}\n\nexport function providerFromMiddleware(middleware: JRPCMiddleware<string[], unknown>): SafeEventEmitterProvider {\n  const engine = new JRPCEngine();\n  engine.push(middleware);\n  const provider: SafeEventEmitterProvider = providerFromEngine(engine);\n  return provider;\n}\n\nexport function providerAsMiddleware(provider: SafeEventEmitterProvider): JRPCMiddleware<unknown, unknown> {\n  return async (req, res, _next, end) => {\n    // send request to provider\n    try {\n      const providerRes: unknown = await provider.sendAsync<unknown, unknown>(req);\n      res.result = providerRes;\n      return end();\n    } catch (error: unknown) {\n      return end(error as Error);\n    }\n  };\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Duplex } from \"readable-stream\";\n\nimport { BufferEncoding } from \"./interfaces\";\n\nexport default class Substream extends Duplex {\n  private readonly _parent: any;\n\n  private readonly _name: string;\n\n  constructor({ parent, name }: { parent: any; name: string }) {\n    super({ objectMode: true });\n    this._parent = parent;\n    this._name = name;\n  }\n\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n  _read(): void {\n    return undefined;\n  }\n\n  /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */\n  _write(chunk: unknown, _encoding: BufferEncoding, callback: (error?: Error | null) => void): void {\n    this._parent.push({\n      name: this._name,\n      data: chunk,\n    });\n    callback();\n  }\n}\n","import eos from \"end-of-stream\";\nimport once from \"once\";\nimport pump from \"pump\";\nimport { Duplex } from \"readable-stream\";\nimport type { Readable, Writable } from \"stream\";\n\nimport { BufferEncoding } from \"./interfaces\";\nimport Substream from \"./substream\";\n\nexport const IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\n\nexport type Stream = Readable | Writable;\n\ninterface Chunk {\n  name: string;\n  data: unknown;\n}\n\nexport class ObjectMultiplex extends Duplex {\n  public _substreams: Record<string, Substream | typeof IGNORE_SUBSTREAM>;\n\n  getStream: (name: string) => Substream | symbol;\n\n  constructor(opts: Record<string, unknown> = {}) {\n    super({\n      ...opts,\n      objectMode: true,\n    });\n    this._substreams = {};\n  }\n\n  createStream(name: string): Substream {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n    }\n\n    // create substream\n    const substream = new Substream({ parent: this, name });\n    this._substreams[name] = substream;\n\n    // listen for parent stream to end\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    anyStreamEnd(this, (_error?: Error | null) => substream.destroy(_error || undefined));\n\n    return substream;\n  }\n\n  // ignore streams (dont display orphaned data warning)\n  ignoreStream(name: string): void {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n    if (this._substreams[name]) {\n      throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n    }\n    // set\n    this._substreams[name] = IGNORE_SUBSTREAM;\n  }\n\n  _read(): void {\n    return undefined;\n  }\n\n  _write(chunk: Chunk, _encoding: BufferEncoding, callback: (error?: Error | null) => void): void {\n    const { name, data } = chunk;\n\n    if (!name) {\n      window.console.warn(`ObjectMultiplex - malformed chunk without name \"${chunk}\"`);\n      return callback();\n    }\n\n    // get corresponding substream\n    const substream = this._substreams[name];\n    if (!substream) {\n      window.console.warn(`ObjectMultiplex - orphaned data for stream \"${name}\"`);\n      return callback();\n    }\n\n    // push data into substream\n    if (substream !== IGNORE_SUBSTREAM) {\n      substream.push(data);\n    }\n\n    return callback();\n  }\n}\n\n// util\nfunction anyStreamEnd(stream: ObjectMultiplex, _cb: (error?: Error | null) => void) {\n  const cb = once(_cb);\n  eos(stream as unknown as Stream, { readable: false }, cb);\n  eos(stream as unknown as Stream, { writable: false }, cb);\n}\n\nexport function setupMultiplex(stream: Duplex): ObjectMultiplex {\n  const mux = new ObjectMultiplex();\n  mux.getStream = function streamHelper(name: string) {\n    if (this._substreams[name]) {\n      return this._substreams[name];\n    }\n    return this.createStream(name);\n  };\n\n  pump(stream as unknown as Stream, mux as unknown as Stream, stream as unknown as Stream, (err) => {\n    if (err) window.console.error(err);\n  });\n  return mux;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nexport function isStream(stream: any) {\n  return stream !== null && typeof stream === \"object\" && typeof stream.pipe === \"function\";\n}\n\nexport function isWritableStream(stream: any) {\n  return isStream(stream) && stream.writable !== false && typeof stream._write === \"function\" && typeof stream._writableState === \"object\";\n}\n\nexport function isReadableStream(stream: any) {\n  return isStream(stream) && stream.readable !== false && typeof stream._read === \"function\" && typeof stream._readableState === \"object\";\n}\n\nexport function isDuplexStream(stream: any) {\n  return isWritableStream(stream) && isReadableStream(stream);\n}\n","export default {\n  errors: {\n    disconnected: (): string => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: (): string => \"Torus: Disconnected from iframe. Page reload required.\",\n    unsupportedSync: (method: string): string =>\n      `Torus: The Torus Ethereum provider does not support synchronous methods like ${method} without a callback parameter.`,\n    invalidDuplexStream: (): string => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: (maxEventListeners: number): string => `Invalid options. Received: { maxEventListeners: ${maxEventListeners}}`,\n    invalidRequestArgs: (): string => `Expected a single, non-array, object argument.`,\n    invalidRequestMethod: (): string => `'args.method' must be a non-empty string.`,\n    invalidRequestParams: (): string => `'args.params' must be an object or array if provided.`,\n    invalidLoggerObject: (): string => `'args.logger' must be an object if provided.`,\n    invalidLoggerMethod: (method: string): string => `'args.logger' must include required method '${method}'.`,\n  },\n  info: {\n    connected: (chainId: string): string => `Torus: Connected to chain with ID \"${chainId}\".`,\n  },\n  warnings: {},\n};\n","import { Transaction, VersionedTransaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\n\nexport const PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\",\n} as const;\n\nexport const TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  TESTING: \"testing\",\n} as const;\n\nexport type TransactionOrVersionedTransaction = Transaction | VersionedTransaction;\n\nexport type PAYMENT_PROVIDER_TYPE = (typeof PAYMENT_PROVIDER)[keyof typeof PAYMENT_PROVIDER];\n\nexport type TORUS_BUILD_ENV_TYPE = (typeof TORUS_BUILD_ENV)[keyof typeof TORUS_BUILD_ENV];\n\nexport const BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\",\n} as const;\n\nexport type EMBED_TRANSLATION_ITEM = {\n  continue: string;\n  actionRequired: string;\n  pendingAction: string;\n  cookiesRequired: string;\n  enableCookies: string;\n  clickHere: string;\n};\n\nexport type BUTTON_POSITION_TYPE = (typeof BUTTON_POSITION)[keyof typeof BUTTON_POSITION];\n\nexport type WALLET_PATH = \"transfer\" | \"topup\" | \"home\" | \"settings\" | \"history\" | \"discover\";\n\nexport const LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\",\n} as const;\n\nexport type LOGIN_PROVIDER_TYPE = (typeof LOGIN_PROVIDER)[keyof typeof LOGIN_PROVIDER];\n\nexport interface TorusCtorArgs {\n  /**\n   * Z-index of the modal and iframe\n   * @defaultValue 99999\n   */\n  modalZIndex?: number;\n}\n\nexport interface NetworkInterface {\n  /**\n   * Block explorer url for the chain\n   * @example https://explorer.solana.com/\n   */\n  blockExplorerUrl: string;\n  /**\n   * Logo url for the base token\n   */\n  logo: string;\n  /**\n   * Name for ticker\n   * @example 'Solana'\n   */\n  tickerName: string;\n  /**\n   * Symbol for ticker\n   * @example SOL\n   */\n  ticker: string;\n  /**\n   * RPC target Url for the chain\n   * @example https://api.devnet.solana.com/\n   */\n  rpcTarget: string;\n  /**\n   * Chain Id parameter(hex with 0x prefix) for the network. Mandatory for all networks. (assign one with a map to network identifier for platforms)\n   * @example 0x1 for mainnet, 0x2 for testnet, 0x3 for devnet,  'loading' if not connected to anything yet or connection fails\n   * @defaultValue 'loading'\n   */\n  chainId: string;\n  /**\n   * Display name for the network\n   */\n  displayName: string;\n}\n\nexport interface PaymentParams {\n  /**\n   * Address to send the funds to\n   */\n  selectedAddress?: string;\n  /**\n   * Default fiat currency for the user to make the payment in\n   */\n  selectedCurrency?: string;\n  /**\n   * Amount to buy in the selectedCurrency\n   */\n  fiatValue?: number;\n  /**\n   * Cryptocurrency to buy\n   */\n  selectedCryptoCurrency?: string;\n  /**\n   * Amount Cryptocurrency to buy\n   */\n  cryptoAmount?: number;\n}\n\nexport interface LoginParams {\n  loginProvider?: string;\n}\n\nexport interface UserInfo {\n  /**\n   * Email of the logged in user\n   */\n  email: string;\n  /**\n   * Full name of the logged in user\n   */\n  name: string;\n  /**\n   * Profile image of the logged in user\n   */\n  profileImage: string;\n  /**\n   * verifier of the logged in user (google, facebook etc)\n   */\n  verifier: string;\n  /**\n   * Verifier Id of the logged in user\n   *\n   * email for google,\n   * id for facebook,\n   * username for reddit,\n   * id for twitch,\n   * id for discord\n   */\n  verifierId: string;\n}\n\nexport interface LocaleLinks<T> {\n  /**\n   * Item corresponding to english\n   */\n  en?: T;\n  /**\n   * Item corresponding to japanese\n   */\n  ja?: T;\n  /**\n   * Item corresponding to korean\n   */\n  ko?: T;\n  /**\n   * Item corresponding to german\n   */\n  de?: T;\n  /**\n   * Item corresponding to chinese (simplified)\n   */\n  zh?: T;\n  /**\n   * Item corresponding to spanish\n   */\n  es?: T;\n}\n\nexport type NetworkLabel = \"mainnet-beta\" | \"testnet\" | \"devnet\";\n\nexport interface ThemeParams {\n  /**\n   * If true, enables dark mode\n   * Defaults to false\n   * @defaultValue false\n   */\n  isDark: boolean;\n  /**\n   * Colors object to customize colors in torus theme.\n   *\n   * Contact us for whitelabel. Example provided in `examples/vue-app`\n   */\n  colors: Record<string, string>;\n}\n\nexport interface WhiteLabelParams {\n  /**\n   * App name to display in the UI\n   */\n  name?: string;\n  /**\n   * App url\n   */\n  url?: string;\n  /**\n   * Whitelabel theme\n   */\n  theme: ThemeParams;\n  /**\n   * Language of whitelabel.\n   *\n   * order of preference: Whitelabel language \\> user language (in torus-website) \\> browser language\n   */\n  defaultLanguage?: string;\n  /**\n   * Logo Url to be used in light mode (dark logo)\n   */\n  logoDark: string;\n  /**\n   * Logo Url to be used in dark mode (light logo)\n   */\n  logoLight: string;\n  /**\n   * Shows/hides topup option in torus-website/widget.\n   * Defaults to false\n   * @defaultValue false\n   */\n  topupHide?: boolean;\n  /**\n   * Custom translations. See (examples/vue-app) to configure\n   */\n  customTranslations?: LocaleLinks<unknown>;\n}\nexport interface TorusParams {\n  /**\n   * Determines where the torus widget is visible on the page.\n   * @defaultValue bottom-left\n   */\n  buttonPosition?: BUTTON_POSITION_TYPE;\n  /**\n   * Api key\n   * Get yours today at {@link https://developer.tor.us | Dashboard}\n   */\n  apiKey?: string;\n\n  /**\n   * Torus Network Object\n   */\n  network?: NetworkInterface | NetworkLabel;\n  /**\n   * Build Environment of Torus.\n   *\n   * production uses https://solana.tor.us,\n   *\n   * development uses http://localhost:8080 (expects torus-website to be run locally),\n   *\n   * testing uses https://solana-testing.tor.us (latest internal build)\n   * @defaultValue production\n   */\n  buildEnv?: TORUS_BUILD_ENV_TYPE;\n  /**\n   * Enables or disables logging.\n   *\n   * Defaults to false in prod and true in other environments\n   */\n  enableLogging?: boolean;\n  /**\n   * whether to show/hide torus widget.\n   *\n   * Defaults to true\n   * @defaultValue true\n   */\n  showTorusButton?: boolean;\n  /**\n   * Prefers to use localStorage instead of sessionStorage for torus iframe. Allows longer lived sessions\n   *\n   * Defaults to false\n   * @defaultValue false\n   */\n  useLocalStorage?: boolean;\n  /**\n   * Allows passing external data for initialize\n   *\n   * Defaults to empty object\n   */\n  extraParams?: { [keyof: string]: string };\n  /**\n   * Params to enable whitelabelling of torus website and widget\n   */\n  whiteLabel?: WhiteLabelParams;\n}\n\nexport interface TorusLoginParams {\n  loginProvider?: LOGIN_PROVIDER_TYPE;\n  login_hint?: string;\n}\n\nexport interface ProviderOptions {\n  /**\n   * The name of the stream used to connect to the wallet.\n   */\n  jsonRpcStreamName?: string;\n\n  /**\n   * The maximum number of event listeners.\n   */\n  maxEventListeners?: number;\n}\n\nexport interface BaseProviderState {\n  isConnected: boolean;\n  initialized: boolean;\n  isPermanentlyDisconnected: boolean;\n  hasEmittedConnection: boolean;\n}\n\nexport interface InPageProviderState extends BaseProviderState {\n  accounts: null | string[];\n  isUnlocked: boolean;\n}\n\nexport interface CommunicationProviderState extends BaseProviderState {\n  buttonPosition: string;\n  isLoggedIn: boolean;\n  torusWidgetVisibility: boolean;\n  currentLoginProvider: LOGIN_PROVIDER_TYPE;\n  isIFrameFullScreen: boolean;\n}\n\nexport type Maybe<T> = Partial<T> | T | null | undefined;\n\nexport interface UnValidatedJsonRpcRequest extends JRPCRequest<unknown> {\n  windowId?: string;\n}\n\nexport interface RequestArguments<T> {\n  /** The RPC method to request. */\n  method: string;\n\n  /** The params of the RPC method, if any. */\n  params?: T;\n}\n","import { EMBED_TRANSLATION_ITEM, LocaleLinks, LOGIN_PROVIDER } from \"./interfaces\";\n\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\",\n    },\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\",\n    },\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\",\n    },\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\",\n    },\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\",\n    },\n  },\n} as LocaleLinks<{ embed: EMBED_TRANSLATION_ITEM }>;\n\nexport default {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKeyPrefix: `torus-`,\n};\n","import loglevel from \"loglevel\";\n\nexport default loglevel.getLogger(\"solana-embed\");\n","import { JRPCMiddleware, SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport { LogLevelDesc } from \"loglevel\";\n\nimport config from \"./config\";\nimport { NetworkInterface, NetworkLabel } from \"./interfaces\";\nimport log from \"./loglevel\";\n\n// utility functions\n\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\nexport function createErrorMiddleware(): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: `The request 'method' must be a non-empty string.`,\n        data: req,\n      });\n    }\n\n    next((done) => {\n      const { error } = res;\n      if (!error) {\n        return done();\n      }\n      log.error(`Torus - RPC Error: ${error.message}`, error);\n      return done();\n    });\n  };\n}\n\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\nexport function logStreamDisconnectWarning(remoteLabel: string, error: Error, emitter: SafeEventEmitter): void {\n  let warningMsg = `Torus: Lost connection to \"${remoteLabel}\".`;\n  if (error?.stack) {\n    warningMsg += `\\n${error.stack}`;\n  }\n  log.warn(warningMsg);\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\n\nexport const getWindowId = (): string => Math.random().toString(36).slice(2);\n\nexport const getTorusUrl = async (buildEnv: string): Promise<{ torusUrl: string; logLevel: LogLevelDesc }> => {\n  let torusUrl: string;\n  let logLevel: LogLevelDesc;\n  // const versionUsed = version;\n  // log.info(\"solana embed version used: \", versionUsed);\n  switch (buildEnv) {\n    case \"testing\":\n      torusUrl = \"https://solana-testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n    case \"development\":\n      torusUrl = \"http://localhost:8080\";\n      logLevel = \"debug\";\n      break;\n    default:\n      torusUrl = `https://solana.tor.us`;\n      logLevel = \"error\";\n      break;\n  }\n  return { torusUrl, logLevel };\n};\n\nexport const getUserLanguage = (): string => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(config.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\n\nexport const NOOP = (): void => {\n  // empty function\n};\n\nexport const FEATURES_PROVIDER_CHANGE_WINDOW = { height: 660, width: 375 };\nexport const FEATURES_DEFAULT_WALLET_WINDOW = { height: 740, width: 1315 };\nexport const FEATURES_DEFAULT_POPUP_WINDOW = { height: 700, width: 1200 };\nexport const FEATURES_CONFIRM_WINDOW = { height: 600, width: 400 };\n\nexport function storageAvailable(type: \"localStorage\" | \"sessionStorage\"): boolean {\n  let storage: Storage;\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (error: unknown) {\n    const e = error as { code?: number; name?: string };\n    return (\n      e &&\n      // everything except Firefox\n      (e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === \"QuotaExceededError\" ||\n        // Firefox\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storage &&\n      storage.length !== 0\n    );\n  }\n}\n\n/**\n * popup handler utils\n */\nexport function getPopupFeatures({ width: w, height: h }: { width: number; height: number }): string {\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n  const width = window.innerWidth\n    ? window.innerWidth\n    : document.documentElement.clientWidth\n    ? document.documentElement.clientWidth\n    : window.screen.width;\n\n  const height = window.innerHeight\n    ? window.innerHeight\n    : document.documentElement.clientHeight\n    ? document.documentElement.clientHeight\n    : window.screen.height;\n\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\n\nexport const getNetworkConfig = (label: NetworkLabel): NetworkInterface | undefined => {\n  switch (label) {\n    case \"mainnet-beta\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x1\",\n        displayName: \"Solana Mainnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://green-dark-sky.solana-mainnet.quiknode.pro/97c87069b81ef4ec0765a267525c82153e5404fc/\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    case \"testnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x2\",\n        displayName: \"Solana Testnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://spring-black-waterfall.solana-testnet.quiknode.pro/89830c37acd15df105b23742d37f33dc85b5eff8/\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    case \"devnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x3\",\n        displayName: \"Solana Devnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.devnet.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    default:\n      return undefined;\n  }\n};\n","import { createLoggerMiddleware } from \"@toruslabs/base-controllers\";\nimport {\n  createIdRemapMiddleware,\n  createStreamMiddleware,\n  getRpcPromiseCallback,\n  JRPCEngine,\n  JRPCRequest,\n  JRPCResponse,\n  ObjectMultiplex,\n  SafeEventEmitter,\n  SafeEventEmitterProvider,\n  SendCallBack,\n  Stream,\n} from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport pump from \"pump\";\nimport type { Duplex } from \"readable-stream\";\n\nimport { BaseProviderState, Maybe, ProviderOptions, RequestArguments, UnValidatedJsonRpcRequest } from \"./interfaces\";\nimport { isDuplexStream } from \"./isStream\";\nimport messages from \"./messages\";\nimport { createErrorMiddleware, logStreamDisconnectWarning } from \"./utils\";\n\nabstract class BaseProvider<U extends BaseProviderState> extends SafeEventEmitter implements SafeEventEmitterProvider {\n  /**\n   * Indicating that this provider is a Torus provider.\n   */\n  public readonly isTorus: true;\n\n  _rpcEngine: JRPCEngine;\n\n  jsonRpcConnectionEvents: SafeEventEmitter;\n\n  protected _state: U;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super();\n    if (!isDuplexStream(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners);\n\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n\n    this.request = this.request.bind(this);\n    this.sendAsync = this.sendAsync.bind(this);\n    // this.enable = this.enable.bind(this);\n\n    // setup connectionStream multiplexing\n    const mux = new ObjectMultiplex();\n    pump(\n      connectionStream as unknown as Stream,\n      mux as unknown as Stream,\n      connectionStream as unknown as Stream,\n      this._handleStreamDisconnect.bind(this, \"Torus\")\n    );\n\n    // ignore phishing warning message (handled elsewhere)\n    mux.ignoreStream(\"phishing\");\n\n    // setup own event listeners\n    // connect to async provider\n\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(\n      jsonRpcConnection.stream as unknown as Stream,\n      mux.createStream(jsonRpcStreamName) as unknown as Stream,\n      jsonRpcConnection.stream as unknown as Stream,\n      this._handleStreamDisconnect.bind(this, \"Torus RpcProvider\")\n    );\n\n    // handle RPC requests via dapp-side rpc engine\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(createLoggerMiddleware({ origin: location.origin }));\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine;\n\n    this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n  }\n\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */\n  async request<TArgs, TResponse>(args: RequestArguments<TArgs>): Promise<Maybe<TResponse>> {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args,\n      });\n    }\n\n    const { method, params } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args,\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args,\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({ method, params }, getRpcPromiseCallback(resolve as (value?: unknown) => void, reject) as (...args: unknown[]) => void);\n    });\n  }\n\n  send<T, V>(req: JRPCRequest<T>, callback: SendCallBack<V>): void;\n\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  send(payload: JRPCRequest<unknown>, callback: (error: Error | null, result?: JRPCResponse<unknown>) => void): void {\n    this._rpcRequest(payload, callback as (...args: unknown[]) => void);\n  }\n\n  sendAsync<T, V>(req: JRPCRequest<T>): Promise<V>;\n\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  sendAsync(payload: JRPCRequest<unknown>): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      this._rpcRequest(payload, getRpcPromiseCallback(resolve as (value?: unknown) => void, reject) as (...args: unknown[]) => void);\n    });\n  }\n\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleStreamDisconnect(streamName: string, error: Error): void {\n    logStreamDisconnectWarning(streamName, error, this);\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n\n  // Private Methods\n  //= ===================\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n  abstract _initializeState(...args: unknown[]): Promise<void>;\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  protected abstract _rpcRequest(\n    payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[],\n    callback: (...args: unknown[]) => void,\n    isInternal?: boolean\n  ): void;\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInPageProvider#connect\n   */\n  protected abstract _handleConnect(...args: unknown[]): void;\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected abstract _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void;\n}\n\nexport default BaseProvider;\n","import { VersionedTransaction } from \"@solana/web3.js\";\n\nimport { TransactionOrVersionedTransaction } from \"./interfaces\";\n\nexport const handleEvent = (handle: EventTarget, eventName: string, handler: (...args: unknown[]) => void, ...handlerArgs: unknown[]): void => {\n  const handlerWrapper = () => {\n    handler(...handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n  handle.addEventListener(eventName, handlerWrapper);\n};\n\nexport const htmlToElement = <T extends Element>(html: string): T => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild as T;\n};\n\nexport function isLegacyTransactionInstance(transaction: TransactionOrVersionedTransaction): boolean {\n  return (transaction as VersionedTransaction).version === undefined;\n}\n","import { SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\n\nimport { FEATURES_DEFAULT_POPUP_WINDOW, getPopupFeatures } from \"./utils\";\n\nclass PopupHandler extends SafeEventEmitter {\n  url: URL;\n\n  target: string;\n\n  features: string;\n\n  window: Window;\n\n  windowTimer: number;\n\n  iClosedWindow: boolean;\n\n  timeout: number;\n\n  constructor({ url, target, features, timeout = 30000 }: { url: URL; target?: string; features?: string; timeout?: number }) {\n    super();\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n    this.timeout = timeout;\n    this._setupTimer();\n  }\n\n  _setupTimer(): void {\n    this.windowTimer = Number(\n      setInterval(() => {\n        if (this.window && this.window.closed) {\n          clearInterval(this.windowTimer);\n          setTimeout(() => {\n            if (!this.iClosedWindow) {\n              this.emit(\"close\");\n            }\n            this.iClosedWindow = false;\n            this.window = undefined;\n          }, this.timeout);\n        }\n        if (this.window === undefined) clearInterval(this.windowTimer);\n      }, 500)\n    );\n  }\n\n  open(): Promise<void> {\n    this.window = window.open(this.url.href, this.target, this.features);\n    if (this.window?.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close(): void {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect: boolean): void {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n}\n\nexport default PopupHandler;\n","import { COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, CommunicationWalletProviderState } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { EthereumRpcError } from \"eth-rpc-errors\";\nimport type { Duplex } from \"readable-stream\";\n\nimport BaseProvider from \"./baseProvider\";\nimport configuration from \"./config\";\nimport { htmlToElement } from \"./embedUtils\";\nimport {\n  BUTTON_POSITION,\n  CommunicationProviderState,\n  EMBED_TRANSLATION_ITEM,\n  LocaleLinks,\n  LOGIN_PROVIDER_TYPE,\n  ProviderOptions,\n  RequestArguments,\n  UnValidatedJsonRpcRequest,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport messages from \"./messages\";\nimport PopupHandler from \"./PopupHandler\";\nimport { FEATURES_CONFIRM_WINDOW, getPopupFeatures, getUserLanguage } from \"./utils\";\n\nclass TorusCommunicationProvider extends BaseProvider<CommunicationProviderState> {\n  protected static _defaultState: CommunicationProviderState = {\n    buttonPosition: \"bottom-left\",\n    currentLoginProvider: null,\n    isIFrameFullScreen: false,\n    hasEmittedConnection: false,\n\n    torusWidgetVisibility: false,\n    initialized: false,\n    isLoggedIn: false,\n    isPermanentlyDisconnected: false,\n    isConnected: false,\n  };\n\n  public embedTranslations: EMBED_TRANSLATION_ITEM;\n\n  public torusUrl: string;\n\n  public dappStorageKey: string;\n\n  public windowRefs: Record<string, PopupHandler>;\n\n  tryWindowHandle: (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => void;\n\n  private torusAlertContainer: HTMLDivElement;\n\n  private torusIframe: HTMLIFrameElement;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super(connectionStream, { maxEventListeners, jsonRpcStreamName });\n\n    // private state\n    this._state = {\n      ...TorusCommunicationProvider._defaultState,\n    };\n\n    // public state\n    this.torusUrl = \"\";\n    this.dappStorageKey = \"\";\n    const languageTranslations = configuration.translations[getUserLanguage() as keyof LocaleLinks<{ embed: EMBED_TRANSLATION_ITEM }>];\n    this.embedTranslations = languageTranslations.embed;\n    this.windowRefs = {};\n\n    // setup own event listeners\n\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const notificationHandler = (payload: RequestArguments<Record<string, unknown>>) => {\n      const { method, params } = payload;\n      if (method === COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n        const { isFullScreen, rid } = params;\n        this._displayIframe({ isFull: isFullScreen as boolean, rid: rid as string });\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW) {\n        const { windowId, url } = params as Record<string, string>;\n        this._createPopupBlockAlert(windowId, url);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n        this._handleCloseWindow(params);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n        const { currentLoginProvider } = params;\n        this._state.isLoggedIn = true;\n        this._state.currentLoginProvider = currentLoginProvider as LOGIN_PROVIDER_TYPE;\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n        this._state.isLoggedIn = false;\n        this._state.currentLoginProvider = null;\n        this._displayIframe();\n      }\n    };\n\n    this.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n  }\n\n  get isLoggedIn(): boolean {\n    return this._state.isLoggedIn;\n  }\n\n  get isIFrameFullScreen(): boolean {\n    return this._state.isIFrameFullScreen;\n  }\n\n  /**\n   * Returns whether the inPage provider is connected to Torus.\n   */\n  isConnected(): boolean {\n    return this._state.isConnected;\n  }\n\n  async _initializeState(params: Record<string, unknown>): Promise<void> {\n    try {\n      const { torusUrl, dappStorageKey, torusAlertContainer, torusIframe } = params;\n      this.torusUrl = torusUrl as string;\n      this.dappStorageKey = dappStorageKey as string;\n      this.torusAlertContainer = torusAlertContainer as HTMLDivElement;\n      this.torusIframe = torusIframe as HTMLIFrameElement;\n      this.torusIframe.addEventListener(\"load\", () => {\n        // only do this if iframe is not full screen\n        if (!this._state.isIFrameFullScreen) this._displayIframe();\n      });\n      const { currentLoginProvider, isLoggedIn } = (await this.request({\n        method: COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: [],\n      })) as CommunicationWalletProviderState;\n\n      // indicate that we've connected, for EIP-1193 compliance\n      this._handleConnect(currentLoginProvider, isLoggedIn);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized communication state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  _handleWindow(windowId: string, { url, target, features }: { url?: string; target?: string; features?: string } = {}): void {\n    const finalUrl = new URL(url || `${this.torusUrl}/redirect?windowId=${windowId}`);\n    if (this.dappStorageKey) {\n      // If multiple instances, it returns the first one\n      if (finalUrl.hash) finalUrl.hash += `&dappStorageKey=${this.dappStorageKey}`;\n      else finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    const handledWindow = new PopupHandler({ url: finalUrl, target, features });\n    handledWindow.open();\n    if (!handledWindow.window) {\n      this._createPopupBlockAlert(windowId, finalUrl.href);\n      return;\n    }\n    // Add to collection only if window is opened\n    this.windowRefs[windowId] = handledWindow;\n    // We tell the iframe that the window has been successfully opened\n    this.request<{ windowId: string }, unknown>({\n      method: COMMUNICATION_JRPC_METHODS.OPENED_WINDOW,\n      params: { windowId },\n    });\n    handledWindow.once(\"close\", () => {\n      // user closed the window\n      delete this.windowRefs[windowId];\n      this.request<{ windowId: string }, unknown>({\n        method: COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n        params: { windowId },\n      });\n    });\n  }\n\n  _displayIframe({ isFull = false, rid = \"\" }: { isFull?: boolean; rid?: string } = {}): void {\n    const style: Partial<CSSStyleDeclaration> = {};\n    // set phase\n    if (!isFull) {\n      style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n      switch (this._state.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n    Object.assign(this.torusIframe.style, style);\n    this._state.isIFrameFullScreen = isFull;\n    this.request<{ isIFrameFullScreen: boolean; rid: string }, unknown>({\n      method: COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n      params: { isIFrameFullScreen: isFull, rid },\n    });\n  }\n\n  hideTorusButton(): void {\n    this._state.torusWidgetVisibility = false;\n    this._displayIframe();\n  }\n\n  showTorusButton(): void {\n    this._state.torusWidgetVisibility = true;\n    this._displayIframe();\n  }\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  protected _rpcRequest(payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], callback: (...args: unknown[]) => void): void {\n    const cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n    }\n    this.tryWindowHandle(_payload as JRPCRequest<unknown>[], cb);\n  }\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param currentLoginProvider - The login Provider\n   * emits TorusInpageProvider#connect\n   */\n  protected _handleConnect(currentLoginProvider: string, isLoggedIn: boolean): void {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", { currentLoginProvider, isLoggedIn });\n      log.debug(messages.info.connected(currentLoginProvider));\n    }\n  }\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void {\n    if (this._state.isConnected || (!this._state.isPermanentlyDisconnected && !isRecoverable)) {\n      this._state.isConnected = false;\n\n      let error: Error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(\n          1013, // Try again later\n          errorMessage || messages.errors.disconnected()\n        );\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(\n          1011, // Internal error\n          errorMessage || messages.errors.permanentlyDisconnected()\n        );\n        log.error(error);\n        this._state.currentLoginProvider = null;\n        this._state.isLoggedIn = false;\n        this._state.torusWidgetVisibility = false;\n        this._state.isIFrameFullScreen = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n\n  // Called if the iframe wants to close the window cause it is done processing the request\n  private _handleCloseWindow(params: { windowId?: string }): void {\n    const { windowId } = params;\n    if (this.windowRefs[windowId]) {\n      this.windowRefs[windowId].close();\n      delete this.windowRefs[windowId];\n    }\n  }\n\n  private async _createPopupBlockAlert(windowId: string, url: string): Promise<void> {\n    const logoUrl = this.getLogoUrl();\n    const torusAlert = htmlToElement<HTMLDivElement>(\n      '<div id=\"torusAlert\" class=\"torus-alert--v2\">' +\n        `<div id=\"torusAlert__logo\"><img src=\"${logoUrl}\" /></div>` +\n        \"<div>\" +\n        `<h1 id=\"torusAlert__title\">${this.embedTranslations.actionRequired}</h1>` +\n        `<p id=\"torusAlert__desc\">${this.embedTranslations.pendingAction}</p>` +\n        \"</div>\" +\n        \"</div>\"\n    );\n\n    const successAlert = htmlToElement(`<div><a id=\"torusAlert__btn\">${this.embedTranslations.continue}</a></div>`);\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(windowId, {\n          url,\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW),\n        });\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n\n    const attachOnLoad = () => {\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n\n    attachOnLoad();\n    bindOnLoad();\n    this.torusAlertContainer.style.display = \"block\";\n  }\n\n  private getLogoUrl(): string {\n    const logoUrl = `${this.torusUrl}/images/torus_icon-blue.svg`;\n    return logoUrl;\n  }\n}\n\nexport default TorusCommunicationProvider;\n","import { InPageWalletProviderState, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest, JRPCSuccess } from \"@toruslabs/openlogin-jrpc\";\nimport { EthereumRpcError } from \"eth-rpc-errors\";\nimport dequal from \"fast-deep-equal\";\nimport type { Duplex } from \"readable-stream\";\n\nimport BaseProvider from \"./baseProvider\";\nimport { InPageProviderState, ProviderOptions, RequestArguments, UnValidatedJsonRpcRequest } from \"./interfaces\";\nimport log from \"./loglevel\";\nimport messages from \"./messages\";\n\nclass TorusInPageProvider extends BaseProvider<InPageProviderState> {\n  protected static _defaultState: InPageProviderState = {\n    accounts: null,\n    isConnected: false,\n    isUnlocked: false,\n    initialized: false,\n    isPermanentlyDisconnected: false,\n    hasEmittedConnection: false,\n  };\n\n  /**\n   * The chain ID of the currently connected Solana chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */\n  public chainId: string | null;\n\n  /**\n   * The user's currently selected Solana address.\n   * If null, Torus is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */\n  public selectedAddress: string | null;\n\n  tryWindowHandle: (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => void;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super(connectionStream, { maxEventListeners, jsonRpcStreamName });\n\n    // private state\n    this._state = {\n      ...TorusInPageProvider._defaultState,\n    };\n\n    // public state\n    this.selectedAddress = null;\n    this.chainId = null;\n\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this);\n\n    // setup own event listeners\n\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const jsonRpcNotificationHandler = (payload: RequestArguments<unknown[] | Record<string, unknown>>) => {\n      const { method, params } = payload;\n      if (method === PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n        this._handleAccountsChanged(params as unknown[]);\n      } else if (method === PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n        this._handleUnlockStateChanged(params as Record<string, unknown>);\n      } else if (method === PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n        this._handleChainChanged(params as Record<string, unknown>);\n      }\n    };\n\n    // json rpc notification listener\n    this.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n  }\n\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n  isConnected(): boolean {\n    return this._state.isConnected;\n  }\n\n  // Private Methods\n  //= ===================\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n  async _initializeState(): Promise<void> {\n    try {\n      const { accounts, chainId, isUnlocked } = (await this.request({\n        method: PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: [],\n      })) as InPageWalletProviderState;\n\n      // indicate that we've connected, for EIP-1193 compliance\n      this.emit(\"connect\", { chainId });\n\n      this._handleChainChanged({ chainId });\n      this._handleUnlockStateChanged({ accounts, isUnlocked });\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized provider state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  _rpcRequest(payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], callback: (...args: unknown[]) => void, isInternal = false): void {\n    let cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n\n      if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n        // handle accounts changing\n        cb = ((err: Error, res: JRPCSuccess<string[]>) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n          callback(err, res);\n        }) as (...args: unknown[]) => void;\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload as JRPCRequest<unknown>, cb);\n        return;\n      }\n    }\n    this.tryWindowHandle(_payload, cb);\n  }\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInpageProvider#connect\n   */\n  protected _handleConnect(chainId: string): void {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", { chainId });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void {\n    if (this._state.isConnected || (!this._state.isPermanentlyDisconnected && !isRecoverable)) {\n      this._state.isConnected = false;\n\n      let error: Error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(\n          1013, // Try again later\n          errorMessage || messages.errors.disconnected()\n        );\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(\n          1011, // Internal error\n          errorMessage || messages.errors.permanentlyDisconnected()\n        );\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n\n  /**\n   * Called when accounts may have changed.\n   */\n  protected _handleAccountsChanged(accounts: unknown[], isEthAccounts = false, isInternal = false): void {\n    // defensive programming\n    let finalAccounts = accounts;\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    }\n\n    // emit accountsChanged if anything about the accounts array has changed\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before solana_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n\n      this._state.accounts = finalAccounts as string[];\n      this.emit(\"accountsChanged\", finalAccounts);\n    }\n\n    // handle selectedAddress\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = (finalAccounts[0] as string) || null;\n    }\n  }\n\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits TorusInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n  protected _handleChainChanged({ chainId }: { chainId?: string } = {}): void {\n    if (!chainId) {\n      log.error(\"Torus: Received invalid network parameters. Please report this bug.\", { chainId });\n      return;\n    }\n\n    if (chainId === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n  protected _handleUnlockStateChanged({ accounts, isUnlocked }: { accounts?: string[]; isUnlocked?: boolean } = {}): void {\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", { isUnlocked });\n      return;\n    }\n\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n}\n\nexport default TorusInPageProvider;\n","/**\n * Returns whether the given image URL exists\n */\nfunction imgExists(url: string): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n      img.onload = () => resolve(true);\n      img.onerror = () => resolve(false);\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\n/**\n * Extracts a name for the site from the DOM\n */\nconst getSiteName = (window: Window): string => {\n  const { document } = window;\n\n  const siteName = document.querySelector<HTMLMetaElement>('head > meta[property=\"og:site_name\"]');\n  if (siteName) {\n    return siteName.content;\n  }\n\n  const metaTitle = document.querySelector<HTMLMetaElement>('head > meta[name=\"title\"]');\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n\n  return window.location.hostname;\n};\n\n/**\n * Extracts an icon for the site from the DOM\n */\nasync function getSiteIcon(window: Window): Promise<string> {\n  try {\n    const { document } = window;\n\n    // Use the site's favicon if it exists\n    let icon = document.querySelector<HTMLLinkElement>('head > link[rel=\"shortcut icon\"]');\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    // Search through available icons in no particular order\n    icon = Array.from(document.querySelectorAll<HTMLLinkElement>('head > link[rel=\"icon\"]')).find((_icon) => Boolean(_icon.href));\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    return \"\";\n  } catch (error) {\n    return \"\";\n  }\n}\n\n/**\n * Gets site metadata and returns it\n *\n */\nconst getSiteMetadata = async (): Promise<{ name: string; icon: string }> => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window),\n});\n\nexport default getSiteMetadata;\n","import { PublicKey, SendOptions, SignaturePubkeyPair, Transaction, VersionedTransaction } from \"@solana/web3.js\";\nimport { COMMUNICATION_JRPC_METHODS } from \"@toruslabs/base-controllers\";\nimport { setAPIKey } from \"@toruslabs/http-helpers\";\nimport { BasePostMessageStream, getRpcPromiseCallback, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\n\nimport { version } from \"../package.json\";\nimport TorusCommunicationProvider from \"./communicationProvider\";\nimport configuration from \"./config\";\nimport { htmlToElement, isLegacyTransactionInstance } from \"./embedUtils\";\nimport TorusInPageProvider from \"./inPageProvider\";\nimport {\n  BUTTON_POSITION,\n  LOGIN_PROVIDER_TYPE,\n  NetworkInterface,\n  PAYMENT_PROVIDER_TYPE,\n  PaymentParams,\n  TORUS_BUILD_ENV,\n  TorusCtorArgs,\n  TorusLoginParams,\n  TorusParams,\n  TransactionOrVersionedTransaction,\n  UnValidatedJsonRpcRequest,\n  UserInfo,\n  WALLET_PATH,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport PopupHandler from \"./PopupHandler\";\nimport getSiteMetadata from \"./siteMetadata\";\nimport {\n  FEATURES_CONFIRM_WINDOW,\n  FEATURES_DEFAULT_WALLET_WINDOW,\n  FEATURES_PROVIDER_CHANGE_WINDOW,\n  getPopupFeatures,\n  getTorusUrl,\n  getWindowId,\n  storageAvailable,\n} from \"./utils\";\nconst PROVIDER_UNSAFE_METHODS = [\"send_transaction\", \"sign_transaction\", \"sign_all_transactions\", \"sign_message\", \"connect\"];\nconst COMMUNICATION_UNSAFE_METHODS = [COMMUNICATION_JRPC_METHODS.SET_PROVIDER];\n\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\");\n\n// preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const { torusUrl } = await getTorusUrl(\"production\");\n    torusIframeHtml.href = `${torusUrl}/frame`;\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\n\nclass Torus {\n  isInitialized: boolean;\n\n  torusAlert: HTMLDivElement;\n\n  modalZIndex: number;\n\n  alertZIndex: number;\n\n  public requestedLoginProvider?: LOGIN_PROVIDER_TYPE;\n\n  provider: TorusInPageProvider;\n\n  communicationProvider: TorusCommunicationProvider;\n\n  dappStorageKey: string;\n\n  isTopupHidden = false;\n\n  private torusAlertContainer: HTMLDivElement;\n\n  private torusUrl: string;\n\n  private torusIframe: HTMLIFrameElement;\n\n  private styleLink: HTMLLinkElement;\n\n  constructor({ modalZIndex = 99999 }: TorusCtorArgs = {}) {\n    this.torusUrl = \"\";\n    this.isInitialized = false; // init done\n    this.requestedLoginProvider = null;\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.dappStorageKey = \"\";\n  }\n\n  get isLoggedIn(): boolean {\n    if (!this.communicationProvider) return false;\n    return this.communicationProvider.isLoggedIn;\n  }\n\n  async init({\n    buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n    enableLogging = false,\n    network,\n    showTorusButton = false,\n    useLocalStorage = false,\n    buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n    apiKey = \"torus-default\",\n    extraParams = {},\n    whiteLabel,\n  }: TorusParams = {}): Promise<void> {\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    setAPIKey(apiKey);\n    const { torusUrl, logLevel } = await getTorusUrl(buildEnv);\n    log.enableAll();\n    log.info(torusUrl, \"url loaded\");\n    log.info(`Solana Embed Version :${version}`);\n    this.torusUrl = torusUrl;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();\n    else log.disableAll();\n    const dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";\n    else torusIframeUrl.pathname += \"/frame\";\n\n    const hashParams = new URLSearchParams();\n    if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n    hashParams.append(\"origin\", window.location.origin);\n\n    torusIframeUrl.hash = hashParams.toString();\n\n    // Iframe code\n    this.torusIframe = htmlToElement<HTMLIFrameElement>(\n      `<iframe\n        id=\"torusIframe\"\n        class=\"torusIframe\"\n        src=\"${torusIframeUrl.href}\"\n        style=\"display: none; position: fixed; top: 0; right: 0; width: 100%;\n        height: 100%; border: none; border-radius: 0; z-index: ${this.modalZIndex.toString()}\"\n      ></iframe>`\n    );\n\n    this.torusAlertContainer = htmlToElement<HTMLDivElement>(\n      `<div id=\"torusAlertContainer\" style=\"display:none; z-index: ${this.alertZIndex.toString()}\"></div>`\n    );\n\n    this.styleLink = htmlToElement<HTMLLinkElement>(`<link href=\"${torusUrl}/css/widget.css\" rel=\"stylesheet\" type=\"text/css\">`);\n    return new Promise<void>((resolve, reject) => {\n      try {\n        this.torusIframe.addEventListener(\"load\", async () => {\n          const dappMetadata = await getSiteMetadata();\n          // send init params here\n          this.torusIframe.contentWindow.postMessage(\n            {\n              buttonPosition,\n              apiKey,\n              network,\n              dappMetadata,\n              extraParams,\n              whiteLabel,\n            },\n            torusIframeUrl.origin\n          );\n          await this._setupWeb3({\n            torusUrl,\n          });\n          if (showTorusButton) this.showTorusButton();\n          if (whiteLabel?.topupHide) this.isTopupHidden = whiteLabel.topupHide;\n          else this.hideTorusButton();\n          this.isInitialized = true;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (window as any).torus = this;\n          resolve();\n        });\n        window.document.head.appendChild(this.styleLink);\n        window.document.body.appendChild(this.torusIframe);\n        window.document.body.appendChild(this.torusAlertContainer);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  async login(params: TorusLoginParams = {}): Promise<string[]> {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    try {\n      this.requestedLoginProvider = params.loginProvider || null;\n      if (!this.requestedLoginProvider) {\n        this.communicationProvider._displayIframe({ isFull: true });\n      }\n      // If user is already logged in, we assume they have given access to the website\n      const res = await new Promise((resolve, reject) => {\n        // We use this method because we want to update inPage provider state with account info\n        this.provider._rpcRequest(\n          { method: \"solana_requestAccounts\", params: [this.requestedLoginProvider, params.login_hint] },\n          getRpcPromiseCallback(resolve as (value?: unknown) => void, reject) as (...args: unknown[]) => void\n        );\n      });\n\n      if (Array.isArray(res) && res.length > 0) {\n        return res;\n      }\n      // This would never happen, but just in case\n      throw new Error(\"Login failed\");\n    } catch (error) {\n      log.error(\"login failed\", error);\n      throw error;\n    } finally {\n      if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n    }\n  }\n\n  async loginWithPrivateKey(loginParams: { privateKey: string; userInfo: UserInfo }): Promise<void> {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    const { privateKey, userInfo } = loginParams;\n    const { success } = await this.communicationProvider.request<{ privateKey: string; userInfo: UserInfo }, { success: boolean }>({\n      method: \"login_with_private_key\",\n      params: {\n        privateKey,\n        userInfo,\n      },\n    });\n    if (!success) throw new Error(\"Login Failed\");\n  }\n\n  async logout(): Promise<void> {\n    if (!this.communicationProvider.isLoggedIn) throw new Error(\"Not logged in\");\n\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.LOGOUT,\n      params: [],\n    });\n    this.requestedLoginProvider = null;\n  }\n\n  async cleanUp(): Promise<void> {\n    if (this.communicationProvider.isLoggedIn) {\n      await this.logout();\n    }\n    this.clearInit();\n  }\n\n  clearInit(): void {\n    function isElement(element: unknown) {\n      return element instanceof Element || element instanceof Document;\n    }\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n    this.isInitialized = false;\n  }\n\n  hideTorusButton(): void {\n    this.communicationProvider.hideTorusButton();\n  }\n\n  showTorusButton(): void {\n    this.communicationProvider.showTorusButton();\n  }\n\n  async setProvider(params: NetworkInterface): Promise<void> {\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n      params: { ...params },\n    });\n  }\n\n  async showWallet(path: WALLET_PATH, params: Record<string, string> = {}): Promise<void> {\n    const instanceId = await this.communicationProvider.request<[], string>({\n      method: COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n      params: [],\n    });\n    const finalPath = path ? `/${path}` : \"\";\n\n    const finalUrl = new URL(`${this.torusUrl}/wallet${finalPath}`);\n    // Using URL constructor to prevent js injection and allow parameter validation.!\n    finalUrl.searchParams.append(\"instanceId\", instanceId);\n    Object.keys(params).forEach((x) => {\n      finalUrl.searchParams.append(x, params[x]);\n    });\n    if (this.dappStorageKey) {\n      finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    // No need to track this window state. Hence, no _handleWindow call.\n    const walletWindow = new PopupHandler({ url: finalUrl, features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW) });\n    walletWindow.open();\n  }\n\n  async getUserInfo(): Promise<UserInfo> {\n    const userInfoResponse = await this.communicationProvider.request<[], UserInfo>({\n      method: COMMUNICATION_JRPC_METHODS.USER_INFO,\n      params: [],\n    });\n    return userInfoResponse as UserInfo;\n  }\n\n  async initiateTopup(provider: PAYMENT_PROVIDER_TYPE, params: PaymentParams): Promise<boolean> {\n    if (!this.isInitialized) throw new Error(\"Torus is not initialized\");\n    const windowId = getWindowId();\n    this.communicationProvider._handleWindow(windowId);\n    const topupResponse = await this.communicationProvider.request<\n      { provider: PAYMENT_PROVIDER_TYPE; params: PaymentParams; windowId: string },\n      boolean\n    >({\n      method: COMMUNICATION_JRPC_METHODS.TOPUP,\n      params: { provider, params, windowId },\n    });\n    return topupResponse;\n  }\n\n  // Solana specific API\n  async getAccounts() {\n    const response = (await this.provider.request({\n      method: \"getAccounts\",\n      params: [],\n    })) as string[];\n    return response;\n  }\n\n  async sendTransaction(transaction: TransactionOrVersionedTransaction): Promise<string> {\n    const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n    const message = isLegacyTransaction\n      ? (transaction as Transaction).serialize({ requireAllSignatures: false }).toString(\"hex\")\n      : Buffer.from((transaction as VersionedTransaction).serialize()).toString(\"hex\");\n    const response = (await this.provider.request({\n      method: \"send_transaction\",\n      params: { message, isLegacyTransaction },\n    })) as string;\n    return response;\n  }\n\n  // support sendOptions\n  async signAndSendTransaction(transaction: TransactionOrVersionedTransaction, options?: SendOptions): Promise<{ signature: string }> {\n    const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n\n    const message = isLegacyTransaction\n      ? (transaction as Transaction).serialize({ requireAllSignatures: false }).toString(\"hex\")\n      : Buffer.from((transaction as VersionedTransaction).serialize()).toString(\"hex\");\n    const response = (await this.provider.request({\n      method: \"send_transaction\",\n      params: { message, options, isLegacyTransaction },\n    })) as string;\n    return { signature: response };\n  }\n\n  async signTransaction(transaction: TransactionOrVersionedTransaction): Promise<TransactionOrVersionedTransaction> {\n    const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n\n    const message = isLegacyTransaction\n      ? (transaction as Transaction).serializeMessage().toString(\"hex\")\n      : Buffer.from((transaction as VersionedTransaction).message.serialize()).toString(\"hex\");\n\n    const response: string = (await this.provider.request({\n      method: \"sign_transaction\",\n      params: { message, messageOnly: true, isLegacyTransaction },\n    })) as string;\n\n    // reconstruct signature pair\n    const parsed = JSON.parse(response);\n    const signature: SignaturePubkeyPair = { publicKey: new PublicKey(parsed.publicKey), signature: Buffer.from(parsed.signature, \"hex\") };\n    transaction.addSignature(signature.publicKey, signature.signature);\n    return transaction;\n  }\n\n  async signAllTransactions(transactions: TransactionOrVersionedTransaction[]): Promise<TransactionOrVersionedTransaction[]> {\n    let isLegacyTransaction;\n    const encodedMessage = transactions.map((tx) => {\n      isLegacyTransaction = isLegacyTransactionInstance(tx);\n      return isLegacyTransaction\n        ? (tx as Transaction).serializeMessage().toString(\"hex\")\n        : Buffer.from((tx as VersionedTransaction).message.serialize()).toString(\"hex\");\n    });\n    const responses: string[] = await this.provider.request({\n      method: \"sign_all_transactions\",\n      params: { message: encodedMessage, messageOnly: true, isLegacyTransaction },\n    });\n\n    // reconstruct signature pairs\n    const signatures: SignaturePubkeyPair[] = responses.map((item) => {\n      const parsed = JSON.parse(item);\n      return { publicKey: new PublicKey(parsed.publicKey), signature: Buffer.from(parsed.signature, \"hex\") };\n    });\n\n    transactions.forEach((tx, idx) => {\n      tx.addSignature(signatures[idx].publicKey, signatures[idx].signature);\n      return tx;\n    });\n    return transactions;\n  }\n\n  async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = (await this.provider.request({\n      method: \"sign_message\",\n      params: {\n        data,\n      },\n    })) as Uint8Array;\n    return response;\n  }\n\n  async getGaslessPublicKey(): Promise<string> {\n    const response = (await this.provider.request({\n      method: \"get_gasless_public_key\",\n      params: [],\n    })) as string;\n    return response;\n  }\n\n  // async connect(): Promise<boolean> {\n  //   const response = (await this.provider.request({\n  //     method: \"connect\",\n  //     params: {},\n  //   })) as boolean;\n  //   return response;\n  // }\n\n  private handleDappStorageKey(useLocalStorage: boolean) {\n    const localStorageKey = `${configuration.localStorageKeyPrefix}${window.location.hostname}`;\n    let dappStorageKey = \"\";\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const storedKey = window.localStorage.getItem(localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;\n      else {\n        const generatedKey = `torus-app-${getWindowId()}`;\n        window.localStorage.setItem(localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n    this.dappStorageKey = dappStorageKey;\n    return dappStorageKey;\n  }\n\n  private async _setupWeb3(providerParams: { torusUrl: string }): Promise<void> {\n    log.info(\"setupWeb3 running\");\n    // setup background connection\n    const providerStream = new BasePostMessageStream({\n      name: \"embed_torus\",\n      target: \"iframe_torus\",\n      targetWindow: this.torusIframe.contentWindow,\n    });\n\n    // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_communication\",\n      target: \"iframe_communication\",\n      targetWindow: this.torusIframe.contentWindow,\n    });\n\n    // compose the inPage provider\n    const inPageProvider = new TorusInPageProvider(providerStream, {});\n    const communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n\n    inPageProvider.tryWindowHandle = (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n        if (!this.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW),\n        });\n        // for inPageProvider methods sending windowId in request instead of params\n        // as params might be positional.\n        _payload.windowId = windowId;\n      }\n      inPageProvider._rpcEngine.handle(_payload as JRPCRequest<unknown>[], cb);\n    };\n\n    communicationProvider.tryWindowHandle = ((payload: JRPCRequest<unknown>, cb: (...args: unknown[]) => void) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW), // todo: are these features generic for all\n        });\n        // for communication methods sending window id in jrpc req params\n        (_payload.params as Record<string, unknown>).windowId = windowId;\n      }\n      communicationProvider._rpcEngine.handle(_payload as JRPCRequest<unknown>, cb);\n    }) as (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => void;\n\n    // detect solana_requestAccounts and pipe to enable for now\n    const detectAccountRequestPrototypeModifier = (\n      m: keyof Omit<TorusInPageProvider, \"isTorus\" | \"selectedAddress\" | \"chainId\" | \"SafeEventEmitter\" | \"jsonRpcConnectionEvents\" | \"_rpcEngine\">\n    ) => {\n      const originalMethod = inPageProvider[m];\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const self = this;\n      inPageProvider[m] = function providerFunc(request: JRPCRequest<string[]>, cb: (...args: unknown[]) => void) {\n        const { method, params = [] } = request;\n        if (method === \"solana_requestAccounts\") {\n          if (!cb) return self.login({ loginProvider: params[0] as LOGIN_PROVIDER_TYPE });\n          self\n            .login({ loginProvider: params[0] as LOGIN_PROVIDER_TYPE })\n            // eslint-disable-next-line promise/no-callback-in-promise\n            .then((res) => cb(null, res))\n            // eslint-disable-next-line promise/no-callback-in-promise\n            .catch((err) => cb(err));\n        }\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        return originalMethod.apply(this, [request, cb]);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      } as any;\n    };\n\n    // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n    detectAccountRequestPrototypeModifier(\"request\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n    detectAccountRequestPrototypeModifier(\"send\");\n\n    const proxiedInPageProvider = new Proxy(inPageProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true,\n    });\n\n    const proxiedCommunicationProvider = new Proxy(communicationProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true,\n    });\n\n    this.provider = proxiedInPageProvider;\n    this.communicationProvider = proxiedCommunicationProvider;\n\n    await Promise.all([\n      inPageProvider._initializeState(),\n      communicationProvider._initializeState({\n        ...providerParams,\n        dappStorageKey: this.dappStorageKey,\n        torusAlertContainer: this.torusAlertContainer,\n        torusIframe: this.torusIframe,\n      }),\n    ]);\n    log.debug(\"Torus - injected provider\");\n  }\n}\n\nexport default Torus;\n","import Torus, { NetworkInterface, TorusCtorArgs, TorusLoginParams, TorusParams } from \"@toruslabs/solana-embed\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  IProvider,\n  log,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseSolanaAdapter } from \"@web3auth/base-solana-adapter\";\nimport { ITorusWalletProvider, TorusInjectedProvider } from \"@web3auth/solana-provider\";\n\nexport interface SolanaWalletOptions extends BaseAdapterSettings {\n  adapterSettings?: TorusCtorArgs;\n  loginSettings?: TorusLoginParams;\n  initParams?: Omit<TorusParams, \"network\">;\n}\n\nexport class SolanaWalletAdapter extends BaseSolanaAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.TORUS_SOLANA;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public torusInstance: Torus | null = null;\n\n  private torusWalletOptions?: TorusCtorArgs;\n\n  private initParams?: TorusParams;\n\n  private loginSettings?: TorusLoginParams = {};\n\n  private solanaProvider: TorusInjectedProvider | null = null;\n\n  constructor(params: SolanaWalletOptions = {}) {\n    super(params);\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n  }\n\n  get provider(): IProvider | null {\n    if (this.status !== ADAPTER_STATUS.NOT_READY && this.solanaProvider) {\n      return this.solanaProvider;\n    }\n    return null;\n  }\n\n  set provider(_: IProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions = {}): Promise<void> {\n    await super.init(options);\n    super.checkInitializationRequirements();\n    const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n    const network: NetworkInterface = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, tickerName, ticker, logo: \"\" };\n\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    log.debug(\"initializing torus solana adapter init\");\n    await this.torusInstance.init({ showTorusButton: false, ...this.initParams, network });\n\n    this.solanaProvider = new TorusInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig as CustomChainConfig,\n      },\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);\n\n    try {\n      log.debug(\"initializing torus solana adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached torus solana provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect(): Promise<IProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    if (!this.solanaProvider) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.TORUS_SOLANA });\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      try {\n        const torusInpageProvider = this.torusInstance.provider as unknown as ITorusWalletProvider;\n        torusInpageProvider.sendTransaction = this.torusInstance.sendTransaction.bind(this.torusInstance);\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        torusInpageProvider.signAllTransactions = this.torusInstance.signAllTransactions.bind(this.torusInstance);\n        torusInpageProvider.signMessage = this.torusInstance.signMessage.bind(this.torusInstance);\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        torusInpageProvider.signTransaction = this.torusInstance.signTransaction.bind(this.torusInstance);\n        await this.solanaProvider.setupProvider(torusInpageProvider);\n      } catch (error: unknown) {\n        // some issue in solana wallet, always connecting to mainnet on init.\n        // fallback to change network if not connected to correct one on login.\n        if (error instanceof Web3AuthError && error.code === 5010) {\n          const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n          const network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, tickerName, ticker, logo: \"\" };\n          await this.torusInstance.setProvider(network);\n        } else {\n          throw error;\n        }\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, { adapter: WALLET_ADAPTERS.TORUS_SOLANA, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if (error instanceof Web3AuthError) throw error;\n      throw WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnectSession();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n    if (options.cleanup) {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n      this.solanaProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    await super.disconnect();\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo();\n    return userInfo;\n  }\n\n  public async addChain(chainConfig: CustomChainConfig, init = false): Promise<void> {\n    super.checkAddChainRequirements(chainConfig, init);\n    // await this.solanaProvider?.addChain(chainConfig);\n    this.addChainConfig(chainConfig);\n  }\n\n  public async switchChain(params: { chainId: string }, init = false): Promise<void> {\n    super.checkSwitchChainRequirements(params, init);\n    const chainConfig = this.getChainConfig(params.chainId) as CustomChainConfig;\n    await this.torusInstance?.setProvider({\n      rpcTarget: chainConfig.rpcTarget,\n      chainId: chainConfig.chainId,\n      displayName: chainConfig.displayName,\n      blockExplorerUrl: chainConfig.blockExplorer,\n      ticker: chainConfig.ticker,\n      tickerName: chainConfig.tickerName,\n      logo: \"https://images.web3auth.io/login-torus-solana.svg\",\n    });\n    this.setAdapterSettings({ chainConfig: this.getChainConfig(params.chainId) as CustomChainConfig });\n  }\n}\n",null,null,null,null,null,"'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n"],"names":["log","logLevel","setLevel","levels","INFO","apiKey","embedHost","sentry","tracingOrigins","tracingPaths","setAPIKey","apiKey_","setLogLevel","level","async","fetchAndTrace","url","init","_url","URL","error","includes","origin","pathname","transaction","startTransaction","name","span","startChild","op","response","fetch","finish","getApiKeyHeaders","headers","debugLogResponse","info","status","statusText","get","options_","arguments","length","undefined","defaultOptions","mode","useAPIKey","_objectSpread","options","merge","method","ok","responseContentType","json","text","post","data","customOptions","isUrlEncodedData","body","JSON","stringify","promiseTimeout","ms","promise","timeout","Promise","_resolve","reject","id","setTimeout","clearTimeout","Error","race","then","logTracingHeader","patch","put","BaseSolanaAdapter","BaseAdapter","_","this","chainConfig","getChainConfig","CHAIN_NAMESPACES","SOLANA","provider","ADAPTER_STATUS","CONNECTED","WalletLoginError","notConnectedError","chainNamespace","chainId","accounts","request","existingToken","getSavedToken","checkIfTokenIsExpired","idToken","payload","domain","window","location","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","challenge","signChallenge","encodedMessage","TextEncoder","encode","signedMessage","params","message","display","verifySignedChallenge","bs58","sessionTime","clientId","web3AuthNetwork","saveToken","super","checkDisconnectionRequirements","clearToken","rehydrated","emit","ADAPTER_EVENTS","DISCONNECTED","module","exports","ALPHABET","TypeError","BASE_MAP","Uint8Array","j","i","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","iFACTOR","decodeUnsafe","source","psz","zeroes","size","b256","carry","it3","it4","vch","ArrayBuffer","isView","buffer","byteOffset","byteLength","Array","isArray","from","pbegin","pend","b58","it1","it2","str","repeat","decode","string","basex","require","noop","ACK","BasePostMessageStream","Duplex","constructor","_ref","target","targetWindow","targetOrigin","objectMode","_defineProperty","_init","_haveSyn","_name","_target","_targetWindow","_targetOrigin","_onMessage","onMessage","bind","_synIntervalId","addEventListener","_handShake","_break","cork","_write","_onData","push","err","uncork","_postMessage","originConstraint","postMessage","event","_read","cb","_destroy","removeEventListener","safeApply","handler","context","args","Reflect","apply","SafeEventEmitter","EventEmitter","type","doError","events","_events","_len","_key","er","len","listeners","arr","n","copy","arrayClone","SerializableError","code","Number","isInteger","stack","getRpcPromiseCallback","resolve","unwrapResult","result","createStreamMiddleware","idMap","stream","read","write","res","_encoding","processNotification","Object","assign","end","processResponse","_err","middleware","req","next","JRPCEngine","_middleware","middlewareStack","returnHandlers","isComplete","_runMiddleware","reverse","serializeError","returnHandler","handlers","_req","handle","_handleBatch","_handle","_promiseHandle","asMiddleware","middlewareError","_runAllMiddleware","_runReturnHandlers","handlerCallback","reqs","responses","all","map","callerReq","jsonrpc","_processRequest","_error","_checkForCompletion","Substream","parent","_parent","chunk","callback","IGNORE_SUBSTREAM","Symbol","ObjectMultiplex","opts","_substreams","createStream","substream","_cb","once","eos","readable","writable","anyStreamEnd","destroy","ignoreStream","console","warn","isStream","pipe","isDuplexStream","_writableState","isWritableStream","_readableState","isReadableStream","messages","disconnected","permanentlyDisconnected","unsupportedSync","invalidDuplexStream","invalidOptions","maxEventListeners","invalidRequestArgs","invalidRequestMethod","invalidRequestParams","invalidLoggerObject","invalidLoggerMethod","connected","TORUS_BUILD_ENV","PRODUCTION","DEVELOPMENT","TESTING","BUTTON_POSITION","BOTTOM_LEFT","TOP_LEFT","BOTTOM_RIGHT","TOP_RIGHT","configuration","supportedVerifierList","api","translations","en","embed","continue","actionRequired","pendingAction","cookiesRequired","enableCookies","clickHere","de","ja","ko","zh","prodTorusUrl","localStorageKeyPrefix","loglevel","getWindowId","getTorusUrl","torusUrl","buildEnv","FEATURES_PROVIDER_CHANGE_WINDOW","height","width","FEATURES_DEFAULT_WALLET_WINDOW","FEATURES_DEFAULT_POPUP_WINDOW","FEATURES_CONFIRM_WINDOW","getPopupFeatures","w","h","dualScreenLeft","screenLeft","screenX","dualScreenTop","screenTop","screenY","innerWidth","document","documentElement","clientWidth","screen","innerHeight","clientHeight","left","abs","BaseProvider","connectionStream","jsonRpcStreamName","isTorus","setMaxListeners","_handleConnect","_handleDisconnect","_handleStreamDisconnect","_rpcRequest","_initializeState","sendAsync","mux","pump","jsonRpcConnection","rpcEngine","_end","originalId","newId","done","ethErrors","rpc","invalidRequest","createLoggerMiddleware","_rpcEngine","jsonRpcConnectionEvents","send","streamName","remoteLabel","emitter","warningMsg","listenerCount","logStreamDisconnectWarning","htmlToElement","html","template","createElement","trimmedHtml","trim","innerHTML","content","firstChild","isLegacyTransactionInstance","PopupHandler","features","windowTimer","iClosedWindow","_setupTimer","setInterval","closed","clearInterval","open","_this$window","focus","close","redirect","locationReplaceOnRedirect","replace","TorusCommunicationProvider","_state","_defaultState","dappStorageKey","languageTranslations","getUserLanguage","userLanguage","navigator","language","userLanguages","split","prototype","hasOwnProperty","call","embedTranslations","windowRefs","on","isConnected","COMMUNICATION_NOTIFICATIONS","IFRAME_STATUS","isFullScreen","rid","_displayIframe","isFull","CREATE_WINDOW","windowId","_createPopupBlockAlert","CLOSE_WINDOW","_handleCloseWindow","USER_LOGGED_IN","currentLoginProvider","isLoggedIn","USER_LOGGED_OUT","isIFrameFullScreen","torusAlertContainer","torusIframe","COMMUNICATION_JRPC_METHODS","GET_PROVIDER_STATE","initialized","_handleWindow","finalUrl","hash","handledWindow","OPENED_WINDOW","CLOSED_WINDOW","style","top","right","bottom","torusWidgetVisibility","buttonPosition","hideTorusButton","showTorusButton","_payload","tryWindowHandle","debug","isRecoverable","errorMessage","isPermanentlyDisconnected","EthereumRpcError","logoUrl","getLogoUrl","torusAlert","successAlert","btnContainer","appendChild","attachOnLoad","bindOnLoad","remove","children","hasEmittedConnection","TorusInPageProvider","selectedAddress","_handleAccountsChanged","_handleChainChanged","_handleUnlockStateChanged","PROVIDER_NOTIFICATIONS","ACCOUNTS_CHANGED","UNLOCK_STATE_CHANGED","CHAIN_CHANGED","isUnlocked","PROVIDER_JRPC_METHODS","isInternal","isEthAccounts","finalAccounts","account","dequal","imgExists","img","onload","onerror","src","e","getSiteName","siteName","querySelector","metaTitle","title","hostname","getSiteIcon","icon","querySelectorAll","find","_icon","Boolean","PROVIDER_UNSAFE_METHODS","COMMUNICATION_UNSAFE_METHODS","SET_PROVIDER","isLocalStorageAvailable","storage","setItem","removeItem","storageAvailable","torusIframeHtml","crossOrigin","rel","relList","supports","head","Torus","modalZIndex","isInitialized","requestedLoginProvider","alertZIndex","communicationProvider","enableLogging","network","useLocalStorage","extraParams","whiteLabel","enableAll","setDefaultLevel","disableAll","handleDappStorageKey","torusIframeUrl","endsWith","hashParams","URLSearchParams","append","styleLink","dappMetadata","getSiteMetadata","contentWindow","_setupWeb3","topupHide","isTopupHidden","torus","loginProvider","login_hint","loginParams","privateKey","userInfo","success","LOGOUT","logout","clearInit","isElement","element","Element","Document","contains","path","instanceId","WALLET_INSTANCE_ID","finalPath","searchParams","keys","forEach","USER_INFO","TOPUP","isLegacyTransaction","serialize","requireAllSignatures","Buffer","signature","serializeMessage","messageOnly","parsed","parse","publicKey","PublicKey","addSignature","transactions","tx","signatures","item","idx","localStorageKey","storedKey","localStorage","getItem","generatedKey","providerParams","providerStream","communicationStream","inPageProvider","detectAccountRequestPrototypeModifier","m","originalMethod","self","login","catch","proxiedInPageProvider","Proxy","deleteProperty","proxiedCommunicationProvider","SolanaWalletAdapter","WALLET_ADAPTERS","TORUS_SOLANA","ADAPTER_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","NOT_READY","torusWalletOptions","adapterSettings","initParams","loginSettings","solanaProvider","checkInitializationRequirements","blockExplorer","displayName","rpcTarget","ticker","tickerName","blockExplorerUrl","logo","torusInstance","TorusInjectedProvider","config","READY","autoConnect","connect","ERRORED","checkConnectionRequirements","WalletInitializationError","notReady","CONNECTING","adapter","torusInpageProvider","sendTransaction","signAllTransactions","signMessage","signTransaction","setupProvider","Web3AuthError","setProvider","reconnected","connectionError","cleanup","disconnectSession","disconnect","getUserInfo","checkAddChainRequirements","addChainConfig","_this$torusInstance","checkSwitchChainRequirements","setAdapterSettings","fast_safe_stringify_1","serialized","default","stringifyReplacer","value","isValidEthProviderCode","invalidInput","resourceNotFound","resourceUnavailable","transactionRejected","methodNotSupported","limitExceeded","methodNotFound","invalidParams","internal","userRejectedRequest","unauthorized","unsupportedMethod","chainDisconnected","standard","classes_1","utils_1","error_constants_1","getEthJsonRpcError","arg","parseOpts","getMessageFromCode","getEthProviderError","EthereumProviderError","errorCodes","server","custom","enumerable","errors_1","FALLBACK_ERROR_CODE","FALLBACK_MESSAGE","FALLBACK_ERROR","fallbackMessage","codeString","hasKey","errorValues","isJsonRpcServerError","JSON_RPC_SERVER_ERROR_MESSAGE","isValidCode","assignOriginalError","obj","key","fallbackError","shouldIncludeStack","originalError","_a","_b","equal","a","b","RegExp","flags","valueOf"],"sourceRoot":""}